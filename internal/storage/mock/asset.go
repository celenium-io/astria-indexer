// SPDX-FileCopyrightText: 2025 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: asset.go
//
// Generated by this command:
//
//	mockgen -source=asset.go -destination=mock/asset.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/astria-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIAsset is a mock of IAsset interface.
type MockIAsset struct {
	ctrl     *gomock.Controller
	recorder *MockIAssetMockRecorder
}

// MockIAssetMockRecorder is the mock recorder for MockIAsset.
type MockIAssetMockRecorder struct {
	mock *MockIAsset
}

// NewMockIAsset creates a new mock instance.
func NewMockIAsset(ctrl *gomock.Controller) *MockIAsset {
	mock := &MockIAsset{ctrl: ctrl}
	mock.recorder = &MockIAssetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAsset) EXPECT() *MockIAssetMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockIAsset) List(ctx context.Context, limit, offset int, sortBy string, order storage0.SortOrder) ([]storage.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, sortBy, order)
	ret0, _ := ret[0].([]storage.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIAssetMockRecorder) List(ctx, limit, offset, sortBy, order any) *MockIAssetListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIAsset)(nil).List), ctx, limit, offset, sortBy, order)
	return &MockIAssetListCall{Call: call}
}

// MockIAssetListCall wrap *gomock.Call
type MockIAssetListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIAssetListCall) Return(arg0 []storage.Asset, arg1 error) *MockIAssetListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIAssetListCall) Do(f func(context.Context, int, int, string, storage0.SortOrder) ([]storage.Asset, error)) *MockIAssetListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIAssetListCall) DoAndReturn(f func(context.Context, int, int, string, storage0.SortOrder) ([]storage.Asset, error)) *MockIAssetListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
