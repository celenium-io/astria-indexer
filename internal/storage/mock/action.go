// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: action.go
//
// Generated by this command:
//
//	mockgen -source=action.go -destination=mock/action.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/astria-indexer/internal/storage"
	types "github.com/celenium-io/astria-indexer/pkg/types"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIAction is a mock of IAction interface.
type MockIAction struct {
	ctrl     *gomock.Controller
	recorder *MockIActionMockRecorder
}

// MockIActionMockRecorder is the mock recorder for MockIAction.
type MockIActionMockRecorder struct {
	mock *MockIAction
}

// NewMockIAction creates a new mock instance.
func NewMockIAction(ctrl *gomock.Controller) *MockIAction {
	mock := &MockIAction{ctrl: ctrl}
	mock.recorder = &MockIActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAction) EXPECT() *MockIActionMockRecorder {
	return m.recorder
}

// ByAddress mocks base method.
func (m *MockIAction) ByAddress(ctx context.Context, addressId uint64, filters storage.AddressActionsFilter) ([]storage.AddressAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByAddress", ctx, addressId, filters)
	ret0, _ := ret[0].([]storage.AddressAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByAddress indicates an expected call of ByAddress.
func (mr *MockIActionMockRecorder) ByAddress(ctx, addressId, filters any) *IActionByAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByAddress", reflect.TypeOf((*MockIAction)(nil).ByAddress), ctx, addressId, filters)
	return &IActionByAddressCall{Call: call}
}

// IActionByAddressCall wrap *gomock.Call
type IActionByAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IActionByAddressCall) Return(arg0 []storage.AddressAction, arg1 error) *IActionByAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IActionByAddressCall) Do(f func(context.Context, uint64, storage.AddressActionsFilter) ([]storage.AddressAction, error)) *IActionByAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IActionByAddressCall) DoAndReturn(f func(context.Context, uint64, storage.AddressActionsFilter) ([]storage.AddressAction, error)) *IActionByAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByBlock mocks base method.
func (m *MockIAction) ByBlock(ctx context.Context, height types.Level, limit, offset int) ([]storage.ActionWithTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByBlock", ctx, height, limit, offset)
	ret0, _ := ret[0].([]storage.ActionWithTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByBlock indicates an expected call of ByBlock.
func (mr *MockIActionMockRecorder) ByBlock(ctx, height, limit, offset any) *IActionByBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByBlock", reflect.TypeOf((*MockIAction)(nil).ByBlock), ctx, height, limit, offset)
	return &IActionByBlockCall{Call: call}
}

// IActionByBlockCall wrap *gomock.Call
type IActionByBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IActionByBlockCall) Return(arg0 []storage.ActionWithTx, arg1 error) *IActionByBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IActionByBlockCall) Do(f func(context.Context, types.Level, int, int) ([]storage.ActionWithTx, error)) *IActionByBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IActionByBlockCall) DoAndReturn(f func(context.Context, types.Level, int, int) ([]storage.ActionWithTx, error)) *IActionByBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByRollup mocks base method.
func (m *MockIAction) ByRollup(ctx context.Context, rollupId uint64, limit, offset int, sort storage0.SortOrder) ([]storage.RollupAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByRollup", ctx, rollupId, limit, offset, sort)
	ret0, _ := ret[0].([]storage.RollupAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByRollup indicates an expected call of ByRollup.
func (mr *MockIActionMockRecorder) ByRollup(ctx, rollupId, limit, offset, sort any) *IActionByRollupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByRollup", reflect.TypeOf((*MockIAction)(nil).ByRollup), ctx, rollupId, limit, offset, sort)
	return &IActionByRollupCall{Call: call}
}

// IActionByRollupCall wrap *gomock.Call
type IActionByRollupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IActionByRollupCall) Return(arg0 []storage.RollupAction, arg1 error) *IActionByRollupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IActionByRollupCall) Do(f func(context.Context, uint64, int, int, storage0.SortOrder) ([]storage.RollupAction, error)) *IActionByRollupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IActionByRollupCall) DoAndReturn(f func(context.Context, uint64, int, int, storage0.SortOrder) ([]storage.RollupAction, error)) *IActionByRollupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByTxId mocks base method.
func (m *MockIAction) ByTxId(ctx context.Context, txId uint64, limit, offset int) ([]storage.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByTxId", ctx, txId, limit, offset)
	ret0, _ := ret[0].([]storage.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByTxId indicates an expected call of ByTxId.
func (mr *MockIActionMockRecorder) ByTxId(ctx, txId, limit, offset any) *IActionByTxIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByTxId", reflect.TypeOf((*MockIAction)(nil).ByTxId), ctx, txId, limit, offset)
	return &IActionByTxIdCall{Call: call}
}

// IActionByTxIdCall wrap *gomock.Call
type IActionByTxIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IActionByTxIdCall) Return(arg0 []storage.Action, arg1 error) *IActionByTxIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IActionByTxIdCall) Do(f func(context.Context, uint64, int, int) ([]storage.Action, error)) *IActionByTxIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IActionByTxIdCall) DoAndReturn(f func(context.Context, uint64, int, int) ([]storage.Action, error)) *IActionByTxIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CursorList mocks base method.
func (m *MockIAction) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIActionMockRecorder) CursorList(ctx, id, limit, order, cmp any) *IActionCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIAction)(nil).CursorList), ctx, id, limit, order, cmp)
	return &IActionCursorListCall{Call: call}
}

// IActionCursorListCall wrap *gomock.Call
type IActionCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IActionCursorListCall) Return(arg0 []*storage.Action, arg1 error) *IActionCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IActionCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Action, error)) *IActionCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IActionCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Action, error)) *IActionCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIAction) GetByID(ctx context.Context, id uint64) (*storage.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIActionMockRecorder) GetByID(ctx, id any) *IActionGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIAction)(nil).GetByID), ctx, id)
	return &IActionGetByIDCall{Call: call}
}

// IActionGetByIDCall wrap *gomock.Call
type IActionGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IActionGetByIDCall) Return(arg0 *storage.Action, arg1 error) *IActionGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IActionGetByIDCall) Do(f func(context.Context, uint64) (*storage.Action, error)) *IActionGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IActionGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Action, error)) *IActionGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIAction) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIActionMockRecorder) IsNoRows(err any) *IActionIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIAction)(nil).IsNoRows), err)
	return &IActionIsNoRowsCall{Call: call}
}

// IActionIsNoRowsCall wrap *gomock.Call
type IActionIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IActionIsNoRowsCall) Return(arg0 bool) *IActionIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IActionIsNoRowsCall) Do(f func(error) bool) *IActionIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IActionIsNoRowsCall) DoAndReturn(f func(error) bool) *IActionIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIAction) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIActionMockRecorder) LastID(ctx any) *IActionLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIAction)(nil).LastID), ctx)
	return &IActionLastIDCall{Call: call}
}

// IActionLastIDCall wrap *gomock.Call
type IActionLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IActionLastIDCall) Return(arg0 uint64, arg1 error) *IActionLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IActionLastIDCall) Do(f func(context.Context) (uint64, error)) *IActionLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IActionLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *IActionLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIAction) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIActionMockRecorder) List(ctx, limit, offset, order any) *IActionListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIAction)(nil).List), ctx, limit, offset, order)
	return &IActionListCall{Call: call}
}

// IActionListCall wrap *gomock.Call
type IActionListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IActionListCall) Return(arg0 []*storage.Action, arg1 error) *IActionListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IActionListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Action, error)) *IActionListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IActionListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Action, error)) *IActionListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIAction) Save(ctx context.Context, m *storage.Action) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIActionMockRecorder) Save(ctx, m any) *IActionSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIAction)(nil).Save), ctx, m)
	return &IActionSaveCall{Call: call}
}

// IActionSaveCall wrap *gomock.Call
type IActionSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IActionSaveCall) Return(arg0 error) *IActionSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IActionSaveCall) Do(f func(context.Context, *storage.Action) error) *IActionSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IActionSaveCall) DoAndReturn(f func(context.Context, *storage.Action) error) *IActionSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIAction) Update(ctx context.Context, m *storage.Action) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIActionMockRecorder) Update(ctx, m any) *IActionUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIAction)(nil).Update), ctx, m)
	return &IActionUpdateCall{Call: call}
}

// IActionUpdateCall wrap *gomock.Call
type IActionUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IActionUpdateCall) Return(arg0 error) *IActionUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IActionUpdateCall) Do(f func(context.Context, *storage.Action) error) *IActionUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IActionUpdateCall) DoAndReturn(f func(context.Context, *storage.Action) error) *IActionUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
