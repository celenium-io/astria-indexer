// SPDX-FileCopyrightText: 2025 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: market.go
//
// Generated by this command:
//
//	mockgen -source=market.go -destination=mock/market.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/astria-indexer/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIMarket is a mock of IMarket interface.
type MockIMarket struct {
	ctrl     *gomock.Controller
	recorder *MockIMarketMockRecorder
}

// MockIMarketMockRecorder is the mock recorder for MockIMarket.
type MockIMarketMockRecorder struct {
	mock *MockIMarket
}

// NewMockIMarket creates a new mock instance.
func NewMockIMarket(ctrl *gomock.Controller) *MockIMarket {
	mock := &MockIMarket{ctrl: ctrl}
	mock.recorder = &MockIMarketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMarket) EXPECT() *MockIMarketMockRecorder {
	return m.recorder
}

// Decimals mocks base method.
func (m *MockIMarket) Decimals(ctx context.Context, pair string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decimals", ctx, pair)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decimals indicates an expected call of Decimals.
func (mr *MockIMarketMockRecorder) Decimals(ctx, pair any) *MockIMarketDecimalsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decimals", reflect.TypeOf((*MockIMarket)(nil).Decimals), ctx, pair)
	return &MockIMarketDecimalsCall{Call: call}
}

// MockIMarketDecimalsCall wrap *gomock.Call
type MockIMarketDecimalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMarketDecimalsCall) Return(arg0 int, arg1 error) *MockIMarketDecimalsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMarketDecimalsCall) Do(f func(context.Context, string) (int, error)) *MockIMarketDecimalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMarketDecimalsCall) DoAndReturn(f func(context.Context, string) (int, error)) *MockIMarketDecimalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockIMarket) Get(ctx context.Context, pair string) (storage.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, pair)
	ret0, _ := ret[0].(storage.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIMarketMockRecorder) Get(ctx, pair any) *MockIMarketGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIMarket)(nil).Get), ctx, pair)
	return &MockIMarketGetCall{Call: call}
}

// MockIMarketGetCall wrap *gomock.Call
type MockIMarketGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMarketGetCall) Return(arg0 storage.Market, arg1 error) *MockIMarketGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMarketGetCall) Do(f func(context.Context, string) (storage.Market, error)) *MockIMarketGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMarketGetCall) DoAndReturn(f func(context.Context, string) (storage.Market, error)) *MockIMarketGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// History mocks base method.
func (m *MockIMarket) History(ctx context.Context, pair string, limit, offset int) ([]storage.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "History", ctx, pair, limit, offset)
	ret0, _ := ret[0].([]storage.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// History indicates an expected call of History.
func (mr *MockIMarketMockRecorder) History(ctx, pair, limit, offset any) *MockIMarketHistoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockIMarket)(nil).History), ctx, pair, limit, offset)
	return &MockIMarketHistoryCall{Call: call}
}

// MockIMarketHistoryCall wrap *gomock.Call
type MockIMarketHistoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMarketHistoryCall) Return(arg0 []storage.Market, arg1 error) *MockIMarketHistoryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMarketHistoryCall) Do(f func(context.Context, string, int, int) ([]storage.Market, error)) *MockIMarketHistoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMarketHistoryCall) DoAndReturn(f func(context.Context, string, int, int) ([]storage.Market, error)) *MockIMarketHistoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIMarket) List(ctx context.Context, limit, offset int) ([]storage.Market, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]storage.Market)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIMarketMockRecorder) List(ctx, limit, offset any) *MockIMarketListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIMarket)(nil).List), ctx, limit, offset)
	return &MockIMarketListCall{Call: call}
}

// MockIMarketListCall wrap *gomock.Call
type MockIMarketListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIMarketListCall) Return(arg0 []storage.Market, arg1 error) *MockIMarketListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIMarketListCall) Do(f func(context.Context, int, int) ([]storage.Market, error)) *MockIMarketListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIMarketListCall) DoAndReturn(f func(context.Context, int, int) ([]storage.Market, error)) *MockIMarketListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
