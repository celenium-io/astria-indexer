// Code generated by MockGen. DO NOT EDIT.
// Source: transfer.go
//
// Generated by this command:
//
//	mockgen -source=transfer.go -destination=mock/transfer.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/astria-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockITransfer is a mock of ITransfer interface.
type MockITransfer struct {
	ctrl     *gomock.Controller
	recorder *MockITransferMockRecorder
}

// MockITransferMockRecorder is the mock recorder for MockITransfer.
type MockITransferMockRecorder struct {
	mock *MockITransfer
}

// NewMockITransfer creates a new mock instance.
func NewMockITransfer(ctrl *gomock.Controller) *MockITransfer {
	mock := &MockITransfer{ctrl: ctrl}
	mock.recorder = &MockITransferMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransfer) EXPECT() *MockITransferMockRecorder {
	return m.recorder
}

// CursorList mocks base method.
func (m *MockITransfer) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockITransferMockRecorder) CursorList(ctx, id, limit, order, cmp any) *MockITransferCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockITransfer)(nil).CursorList), ctx, id, limit, order, cmp)
	return &MockITransferCursorListCall{Call: call}
}

// MockITransferCursorListCall wrap *gomock.Call
type MockITransferCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITransferCursorListCall) Return(arg0 []*storage.Transfer, arg1 error) *MockITransferCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITransferCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Transfer, error)) *MockITransferCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITransferCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Transfer, error)) *MockITransferCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockITransfer) GetByID(ctx context.Context, id uint64) (*storage.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockITransferMockRecorder) GetByID(ctx, id any) *MockITransferGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockITransfer)(nil).GetByID), ctx, id)
	return &MockITransferGetByIDCall{Call: call}
}

// MockITransferGetByIDCall wrap *gomock.Call
type MockITransferGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITransferGetByIDCall) Return(arg0 *storage.Transfer, arg1 error) *MockITransferGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITransferGetByIDCall) Do(f func(context.Context, uint64) (*storage.Transfer, error)) *MockITransferGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITransferGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Transfer, error)) *MockITransferGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockITransfer) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockITransferMockRecorder) IsNoRows(err any) *MockITransferIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockITransfer)(nil).IsNoRows), err)
	return &MockITransferIsNoRowsCall{Call: call}
}

// MockITransferIsNoRowsCall wrap *gomock.Call
type MockITransferIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITransferIsNoRowsCall) Return(arg0 bool) *MockITransferIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITransferIsNoRowsCall) Do(f func(error) bool) *MockITransferIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITransferIsNoRowsCall) DoAndReturn(f func(error) bool) *MockITransferIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockITransfer) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockITransferMockRecorder) LastID(ctx any) *MockITransferLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockITransfer)(nil).LastID), ctx)
	return &MockITransferLastIDCall{Call: call}
}

// MockITransferLastIDCall wrap *gomock.Call
type MockITransferLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITransferLastIDCall) Return(arg0 uint64, arg1 error) *MockITransferLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITransferLastIDCall) Do(f func(context.Context) (uint64, error)) *MockITransferLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITransferLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *MockITransferLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockITransfer) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockITransferMockRecorder) List(ctx, limit, offset, order any) *MockITransferListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockITransfer)(nil).List), ctx, limit, offset, order)
	return &MockITransferListCall{Call: call}
}

// MockITransferListCall wrap *gomock.Call
type MockITransferListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITransferListCall) Return(arg0 []*storage.Transfer, arg1 error) *MockITransferListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITransferListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Transfer, error)) *MockITransferListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITransferListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Transfer, error)) *MockITransferListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockITransfer) Save(ctx context.Context, m *storage.Transfer) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockITransferMockRecorder) Save(ctx, m any) *MockITransferSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockITransfer)(nil).Save), ctx, m)
	return &MockITransferSaveCall{Call: call}
}

// MockITransferSaveCall wrap *gomock.Call
type MockITransferSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITransferSaveCall) Return(arg0 error) *MockITransferSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITransferSaveCall) Do(f func(context.Context, *storage.Transfer) error) *MockITransferSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITransferSaveCall) DoAndReturn(f func(context.Context, *storage.Transfer) error) *MockITransferSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockITransfer) Update(ctx context.Context, m *storage.Transfer) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockITransferMockRecorder) Update(ctx, m any) *MockITransferUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockITransfer)(nil).Update), ctx, m)
	return &MockITransferUpdateCall{Call: call}
}

// MockITransferUpdateCall wrap *gomock.Call
type MockITransferUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockITransferUpdateCall) Return(arg0 error) *MockITransferUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockITransferUpdateCall) Do(f func(context.Context, *storage.Transfer) error) *MockITransferUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockITransferUpdateCall) DoAndReturn(f func(context.Context, *storage.Transfer) error) *MockITransferUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
