// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: deposit.go
//
// Generated by this command:
//
//	mockgen -source=deposit.go -destination=mock/deposit.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/astria-indexer/internal/storage"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockIDeposit is a mock of IDeposit interface.
type MockIDeposit struct {
	ctrl     *gomock.Controller
	recorder *MockIDepositMockRecorder
}

// MockIDepositMockRecorder is the mock recorder for MockIDeposit.
type MockIDepositMockRecorder struct {
	mock *MockIDeposit
}

// NewMockIDeposit creates a new mock instance.
func NewMockIDeposit(ctrl *gomock.Controller) *MockIDeposit {
	mock := &MockIDeposit{ctrl: ctrl}
	mock.recorder = &MockIDepositMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDeposit) EXPECT() *MockIDepositMockRecorder {
	return m.recorder
}

// ByBridgeId mocks base method.
func (m *MockIDeposit) ByBridgeId(ctx context.Context, bridgeId uint64, limit, offset int, sort storage0.SortOrder) ([]storage.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByBridgeId", ctx, bridgeId, limit, offset, sort)
	ret0, _ := ret[0].([]storage.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByBridgeId indicates an expected call of ByBridgeId.
func (mr *MockIDepositMockRecorder) ByBridgeId(ctx, bridgeId, limit, offset, sort any) *MockIDepositByBridgeIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByBridgeId", reflect.TypeOf((*MockIDeposit)(nil).ByBridgeId), ctx, bridgeId, limit, offset, sort)
	return &MockIDepositByBridgeIdCall{Call: call}
}

// MockIDepositByBridgeIdCall wrap *gomock.Call
type MockIDepositByBridgeIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIDepositByBridgeIdCall) Return(arg0 []storage.Deposit, arg1 error) *MockIDepositByBridgeIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIDepositByBridgeIdCall) Do(f func(context.Context, uint64, int, int, storage0.SortOrder) ([]storage.Deposit, error)) *MockIDepositByBridgeIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIDepositByBridgeIdCall) DoAndReturn(f func(context.Context, uint64, int, int, storage0.SortOrder) ([]storage.Deposit, error)) *MockIDepositByBridgeIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ByRollupId mocks base method.
func (m *MockIDeposit) ByRollupId(ctx context.Context, rollupId uint64, limit, offset int, sort storage0.SortOrder) ([]storage.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByRollupId", ctx, rollupId, limit, offset, sort)
	ret0, _ := ret[0].([]storage.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByRollupId indicates an expected call of ByRollupId.
func (mr *MockIDepositMockRecorder) ByRollupId(ctx, rollupId, limit, offset, sort any) *MockIDepositByRollupIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByRollupId", reflect.TypeOf((*MockIDeposit)(nil).ByRollupId), ctx, rollupId, limit, offset, sort)
	return &MockIDepositByRollupIdCall{Call: call}
}

// MockIDepositByRollupIdCall wrap *gomock.Call
type MockIDepositByRollupIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIDepositByRollupIdCall) Return(arg0 []storage.Deposit, arg1 error) *MockIDepositByRollupIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIDepositByRollupIdCall) Do(f func(context.Context, uint64, int, int, storage0.SortOrder) ([]storage.Deposit, error)) *MockIDepositByRollupIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIDepositByRollupIdCall) DoAndReturn(f func(context.Context, uint64, int, int, storage0.SortOrder) ([]storage.Deposit, error)) *MockIDepositByRollupIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CursorList mocks base method.
func (m *MockIDeposit) CursorList(ctx context.Context, id, limit uint64, order storage0.SortOrder, cmp storage0.Comparator) ([]*storage.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorList", ctx, id, limit, order, cmp)
	ret0, _ := ret[0].([]*storage.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CursorList indicates an expected call of CursorList.
func (mr *MockIDepositMockRecorder) CursorList(ctx, id, limit, order, cmp any) *MockIDepositCursorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorList", reflect.TypeOf((*MockIDeposit)(nil).CursorList), ctx, id, limit, order, cmp)
	return &MockIDepositCursorListCall{Call: call}
}

// MockIDepositCursorListCall wrap *gomock.Call
type MockIDepositCursorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIDepositCursorListCall) Return(arg0 []*storage.Deposit, arg1 error) *MockIDepositCursorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIDepositCursorListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Deposit, error)) *MockIDepositCursorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIDepositCursorListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder, storage0.Comparator) ([]*storage.Deposit, error)) *MockIDepositCursorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByID mocks base method.
func (m *MockIDeposit) GetByID(ctx context.Context, id uint64) (*storage.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*storage.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIDepositMockRecorder) GetByID(ctx, id any) *MockIDepositGetByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIDeposit)(nil).GetByID), ctx, id)
	return &MockIDepositGetByIDCall{Call: call}
}

// MockIDepositGetByIDCall wrap *gomock.Call
type MockIDepositGetByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIDepositGetByIDCall) Return(arg0 *storage.Deposit, arg1 error) *MockIDepositGetByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIDepositGetByIDCall) Do(f func(context.Context, uint64) (*storage.Deposit, error)) *MockIDepositGetByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIDepositGetByIDCall) DoAndReturn(f func(context.Context, uint64) (*storage.Deposit, error)) *MockIDepositGetByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsNoRows mocks base method.
func (m *MockIDeposit) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockIDepositMockRecorder) IsNoRows(err any) *MockIDepositIsNoRowsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockIDeposit)(nil).IsNoRows), err)
	return &MockIDepositIsNoRowsCall{Call: call}
}

// MockIDepositIsNoRowsCall wrap *gomock.Call
type MockIDepositIsNoRowsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIDepositIsNoRowsCall) Return(arg0 bool) *MockIDepositIsNoRowsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIDepositIsNoRowsCall) Do(f func(error) bool) *MockIDepositIsNoRowsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIDepositIsNoRowsCall) DoAndReturn(f func(error) bool) *MockIDepositIsNoRowsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastID mocks base method.
func (m *MockIDeposit) LastID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastID indicates an expected call of LastID.
func (mr *MockIDepositMockRecorder) LastID(ctx any) *MockIDepositLastIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastID", reflect.TypeOf((*MockIDeposit)(nil).LastID), ctx)
	return &MockIDepositLastIDCall{Call: call}
}

// MockIDepositLastIDCall wrap *gomock.Call
type MockIDepositLastIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIDepositLastIDCall) Return(arg0 uint64, arg1 error) *MockIDepositLastIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIDepositLastIDCall) Do(f func(context.Context) (uint64, error)) *MockIDepositLastIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIDepositLastIDCall) DoAndReturn(f func(context.Context) (uint64, error)) *MockIDepositLastIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockIDeposit) List(ctx context.Context, limit, offset uint64, order storage0.SortOrder) ([]*storage.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset, order)
	ret0, _ := ret[0].([]*storage.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIDepositMockRecorder) List(ctx, limit, offset, order any) *MockIDepositListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIDeposit)(nil).List), ctx, limit, offset, order)
	return &MockIDepositListCall{Call: call}
}

// MockIDepositListCall wrap *gomock.Call
type MockIDepositListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIDepositListCall) Return(arg0 []*storage.Deposit, arg1 error) *MockIDepositListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIDepositListCall) Do(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Deposit, error)) *MockIDepositListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIDepositListCall) DoAndReturn(f func(context.Context, uint64, uint64, storage0.SortOrder) ([]*storage.Deposit, error)) *MockIDepositListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m_2 *MockIDeposit) Save(ctx context.Context, m *storage.Deposit) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Save", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIDepositMockRecorder) Save(ctx, m any) *MockIDepositSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIDeposit)(nil).Save), ctx, m)
	return &MockIDepositSaveCall{Call: call}
}

// MockIDepositSaveCall wrap *gomock.Call
type MockIDepositSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIDepositSaveCall) Return(arg0 error) *MockIDepositSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIDepositSaveCall) Do(f func(context.Context, *storage.Deposit) error) *MockIDepositSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIDepositSaveCall) DoAndReturn(f func(context.Context, *storage.Deposit) error) *MockIDepositSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m_2 *MockIDeposit) Update(ctx context.Context, m *storage.Deposit) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIDepositMockRecorder) Update(ctx, m any) *MockIDepositUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDeposit)(nil).Update), ctx, m)
	return &MockIDepositUpdateCall{Call: call}
}

// MockIDepositUpdateCall wrap *gomock.Call
type MockIDepositUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIDepositUpdateCall) Return(arg0 error) *MockIDepositUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIDepositUpdateCall) Do(f func(context.Context, *storage.Deposit) error) *MockIDepositUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIDepositUpdateCall) DoAndReturn(f func(context.Context, *storage.Deposit) error) *MockIDepositUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
