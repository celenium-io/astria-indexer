// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: generic.go
//
// Generated by this command:
//
//	mockgen -source=generic.go -destination=mock/generic.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/astria-indexer/internal/storage"
	types "github.com/celenium-io/astria-indexer/pkg/types"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	pq "github.com/lib/pq"
	bun "github.com/uptrace/bun"
	gomock "go.uber.org/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTransaction) Add(ctx context.Context, model any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTransactionMockRecorder) Add(ctx, model any) *TransactionAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTransaction)(nil).Add), ctx, model)
	return &TransactionAddCall{Call: call}
}

// TransactionAddCall wrap *gomock.Call
type TransactionAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionAddCall) Return(arg0 error) *TransactionAddCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionAddCall) Do(f func(context.Context, any) error) *TransactionAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionAddCall) DoAndReturn(f func(context.Context, any) error) *TransactionAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BulkSave mocks base method.
func (m *MockTransaction) BulkSave(ctx context.Context, models []any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkSave", ctx, models)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkSave indicates an expected call of BulkSave.
func (mr *MockTransactionMockRecorder) BulkSave(ctx, models any) *TransactionBulkSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkSave", reflect.TypeOf((*MockTransaction)(nil).BulkSave), ctx, models)
	return &TransactionBulkSaveCall{Call: call}
}

// TransactionBulkSaveCall wrap *gomock.Call
type TransactionBulkSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionBulkSaveCall) Return(arg0 error) *TransactionBulkSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionBulkSaveCall) Do(f func(context.Context, []any) error) *TransactionBulkSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionBulkSaveCall) DoAndReturn(f func(context.Context, []any) error) *TransactionBulkSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockTransaction) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTransactionMockRecorder) Close(ctx any) *TransactionCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransaction)(nil).Close), ctx)
	return &TransactionCloseCall{Call: call}
}

// TransactionCloseCall wrap *gomock.Call
type TransactionCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionCloseCall) Return(arg0 error) *TransactionCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionCloseCall) Do(f func(context.Context) error) *TransactionCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionCloseCall) DoAndReturn(f func(context.Context) error) *TransactionCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CopyFrom mocks base method.
func (m *MockTransaction) CopyFrom(ctx context.Context, tableName string, data []storage0.Copiable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", ctx, tableName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockTransactionMockRecorder) CopyFrom(ctx, tableName, data any) *TransactionCopyFromCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockTransaction)(nil).CopyFrom), ctx, tableName, data)
	return &TransactionCopyFromCall{Call: call}
}

// TransactionCopyFromCall wrap *gomock.Call
type TransactionCopyFromCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionCopyFromCall) Return(arg0 error) *TransactionCopyFromCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionCopyFromCall) Do(f func(context.Context, string, []storage0.Copiable) error) *TransactionCopyFromCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionCopyFromCall) DoAndReturn(f func(context.Context, string, []storage0.Copiable) error) *TransactionCopyFromCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exec mocks base method.
func (m *MockTransaction) Exec(ctx context.Context, query string, params ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockTransactionMockRecorder) Exec(ctx, query any, params ...any) *TransactionExecCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, params...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTransaction)(nil).Exec), varargs...)
	return &TransactionExecCall{Call: call}
}

// TransactionExecCall wrap *gomock.Call
type TransactionExecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionExecCall) Return(arg0 int64, arg1 error) *TransactionExecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionExecCall) Do(f func(context.Context, string, ...any) (int64, error)) *TransactionExecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionExecCall) DoAndReturn(f func(context.Context, string, ...any) (int64, error)) *TransactionExecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Flush mocks base method.
func (m *MockTransaction) Flush(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockTransactionMockRecorder) Flush(ctx any) *TransactionFlushCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockTransaction)(nil).Flush), ctx)
	return &TransactionFlushCall{Call: call}
}

// TransactionFlushCall wrap *gomock.Call
type TransactionFlushCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionFlushCall) Return(arg0 error) *TransactionFlushCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionFlushCall) Do(f func(context.Context) error) *TransactionFlushCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionFlushCall) DoAndReturn(f func(context.Context) error) *TransactionFlushCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProposerId mocks base method.
func (m *MockTransaction) GetProposerId(ctx context.Context, address string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposerId", ctx, address)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposerId indicates an expected call of GetProposerId.
func (mr *MockTransactionMockRecorder) GetProposerId(ctx, address any) *TransactionGetProposerIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposerId", reflect.TypeOf((*MockTransaction)(nil).GetProposerId), ctx, address)
	return &TransactionGetProposerIdCall{Call: call}
}

// TransactionGetProposerIdCall wrap *gomock.Call
type TransactionGetProposerIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionGetProposerIdCall) Return(arg0 uint64, arg1 error) *TransactionGetProposerIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionGetProposerIdCall) Do(f func(context.Context, string) (uint64, error)) *TransactionGetProposerIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionGetProposerIdCall) DoAndReturn(f func(context.Context, string) (uint64, error)) *TransactionGetProposerIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRollup mocks base method.
func (m *MockTransaction) GetRollup(ctx context.Context, rollupId []byte) (storage.Rollup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRollup", ctx, rollupId)
	ret0, _ := ret[0].(storage.Rollup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRollup indicates an expected call of GetRollup.
func (mr *MockTransactionMockRecorder) GetRollup(ctx, rollupId any) *TransactionGetRollupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRollup", reflect.TypeOf((*MockTransaction)(nil).GetRollup), ctx, rollupId)
	return &TransactionGetRollupCall{Call: call}
}

// TransactionGetRollupCall wrap *gomock.Call
type TransactionGetRollupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionGetRollupCall) Return(arg0 storage.Rollup, arg1 error) *TransactionGetRollupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionGetRollupCall) Do(f func(context.Context, []byte) (storage.Rollup, error)) *TransactionGetRollupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionGetRollupCall) DoAndReturn(f func(context.Context, []byte) (storage.Rollup, error)) *TransactionGetRollupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HandleError mocks base method.
func (m *MockTransaction) HandleError(ctx context.Context, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleError", ctx, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleError indicates an expected call of HandleError.
func (mr *MockTransactionMockRecorder) HandleError(ctx, err any) *TransactionHandleErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockTransaction)(nil).HandleError), ctx, err)
	return &TransactionHandleErrorCall{Call: call}
}

// TransactionHandleErrorCall wrap *gomock.Call
type TransactionHandleErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionHandleErrorCall) Return(arg0 error) *TransactionHandleErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionHandleErrorCall) Do(f func(context.Context, error) error) *TransactionHandleErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionHandleErrorCall) DoAndReturn(f func(context.Context, error) error) *TransactionHandleErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastBlock mocks base method.
func (m *MockTransaction) LastBlock(ctx context.Context) (storage.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastBlock", ctx)
	ret0, _ := ret[0].(storage.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastBlock indicates an expected call of LastBlock.
func (mr *MockTransactionMockRecorder) LastBlock(ctx any) *TransactionLastBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastBlock", reflect.TypeOf((*MockTransaction)(nil).LastBlock), ctx)
	return &TransactionLastBlockCall{Call: call}
}

// TransactionLastBlockCall wrap *gomock.Call
type TransactionLastBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionLastBlockCall) Return(block storage.Block, err error) *TransactionLastBlockCall {
	c.Call = c.Call.Return(block, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionLastBlockCall) Do(f func(context.Context) (storage.Block, error)) *TransactionLastBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionLastBlockCall) DoAndReturn(f func(context.Context) (storage.Block, error)) *TransactionLastBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastNonce mocks base method.
func (m *MockTransaction) LastNonce(ctx context.Context, id uint64) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastNonce", ctx, id)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastNonce indicates an expected call of LastNonce.
func (mr *MockTransactionMockRecorder) LastNonce(ctx, id any) *TransactionLastNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastNonce", reflect.TypeOf((*MockTransaction)(nil).LastNonce), ctx, id)
	return &TransactionLastNonceCall{Call: call}
}

// TransactionLastNonceCall wrap *gomock.Call
type TransactionLastNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionLastNonceCall) Return(arg0 uint32, arg1 error) *TransactionLastNonceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionLastNonceCall) Do(f func(context.Context, uint64) (uint32, error)) *TransactionLastNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionLastNonceCall) DoAndReturn(f func(context.Context, uint64) (uint32, error)) *TransactionLastNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RetentionBlockSignatures mocks base method.
func (m *MockTransaction) RetentionBlockSignatures(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetentionBlockSignatures", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetentionBlockSignatures indicates an expected call of RetentionBlockSignatures.
func (mr *MockTransactionMockRecorder) RetentionBlockSignatures(ctx, height any) *TransactionRetentionBlockSignaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetentionBlockSignatures", reflect.TypeOf((*MockTransaction)(nil).RetentionBlockSignatures), ctx, height)
	return &TransactionRetentionBlockSignaturesCall{Call: call}
}

// TransactionRetentionBlockSignaturesCall wrap *gomock.Call
type TransactionRetentionBlockSignaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRetentionBlockSignaturesCall) Return(arg0 error) *TransactionRetentionBlockSignaturesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRetentionBlockSignaturesCall) Do(f func(context.Context, types.Level) error) *TransactionRetentionBlockSignaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRetentionBlockSignaturesCall) DoAndReturn(f func(context.Context, types.Level) error) *TransactionRetentionBlockSignaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback(ctx any) *TransactionRollbackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback), ctx)
	return &TransactionRollbackCall{Call: call}
}

// TransactionRollbackCall wrap *gomock.Call
type TransactionRollbackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackCall) Return(arg0 error) *TransactionRollbackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackCall) Do(f func(context.Context) error) *TransactionRollbackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackCall) DoAndReturn(f func(context.Context) error) *TransactionRollbackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackActions mocks base method.
func (m *MockTransaction) RollbackActions(ctx context.Context, height types.Level) ([]storage.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackActions", ctx, height)
	ret0, _ := ret[0].([]storage.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackActions indicates an expected call of RollbackActions.
func (mr *MockTransactionMockRecorder) RollbackActions(ctx, height any) *TransactionRollbackActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackActions", reflect.TypeOf((*MockTransaction)(nil).RollbackActions), ctx, height)
	return &TransactionRollbackActionsCall{Call: call}
}

// TransactionRollbackActionsCall wrap *gomock.Call
type TransactionRollbackActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackActionsCall) Return(actions []storage.Action, err error) *TransactionRollbackActionsCall {
	c.Call = c.Call.Return(actions, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackActionsCall) Do(f func(context.Context, types.Level) ([]storage.Action, error)) *TransactionRollbackActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackActionsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Action, error)) *TransactionRollbackActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackAddressActions mocks base method.
func (m *MockTransaction) RollbackAddressActions(ctx context.Context, height types.Level) ([]storage.AddressAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackAddressActions", ctx, height)
	ret0, _ := ret[0].([]storage.AddressAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackAddressActions indicates an expected call of RollbackAddressActions.
func (mr *MockTransactionMockRecorder) RollbackAddressActions(ctx, height any) *TransactionRollbackAddressActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackAddressActions", reflect.TypeOf((*MockTransaction)(nil).RollbackAddressActions), ctx, height)
	return &TransactionRollbackAddressActionsCall{Call: call}
}

// TransactionRollbackAddressActionsCall wrap *gomock.Call
type TransactionRollbackAddressActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackAddressActionsCall) Return(addrActions []storage.AddressAction, err error) *TransactionRollbackAddressActionsCall {
	c.Call = c.Call.Return(addrActions, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackAddressActionsCall) Do(f func(context.Context, types.Level) ([]storage.AddressAction, error)) *TransactionRollbackAddressActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackAddressActionsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.AddressAction, error)) *TransactionRollbackAddressActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackAddresses mocks base method.
func (m *MockTransaction) RollbackAddresses(ctx context.Context, height types.Level) ([]storage.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackAddresses", ctx, height)
	ret0, _ := ret[0].([]storage.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackAddresses indicates an expected call of RollbackAddresses.
func (mr *MockTransactionMockRecorder) RollbackAddresses(ctx, height any) *TransactionRollbackAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackAddresses", reflect.TypeOf((*MockTransaction)(nil).RollbackAddresses), ctx, height)
	return &TransactionRollbackAddressesCall{Call: call}
}

// TransactionRollbackAddressesCall wrap *gomock.Call
type TransactionRollbackAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackAddressesCall) Return(address []storage.Address, err error) *TransactionRollbackAddressesCall {
	c.Call = c.Call.Return(address, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackAddressesCall) Do(f func(context.Context, types.Level) ([]storage.Address, error)) *TransactionRollbackAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackAddressesCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Address, error)) *TransactionRollbackAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBalanceUpdates mocks base method.
func (m *MockTransaction) RollbackBalanceUpdates(ctx context.Context, height types.Level) ([]storage.BalanceUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBalanceUpdates", ctx, height)
	ret0, _ := ret[0].([]storage.BalanceUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackBalanceUpdates indicates an expected call of RollbackBalanceUpdates.
func (mr *MockTransactionMockRecorder) RollbackBalanceUpdates(ctx, height any) *TransactionRollbackBalanceUpdatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBalanceUpdates", reflect.TypeOf((*MockTransaction)(nil).RollbackBalanceUpdates), ctx, height)
	return &TransactionRollbackBalanceUpdatesCall{Call: call}
}

// TransactionRollbackBalanceUpdatesCall wrap *gomock.Call
type TransactionRollbackBalanceUpdatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackBalanceUpdatesCall) Return(arg0 []storage.BalanceUpdate, arg1 error) *TransactionRollbackBalanceUpdatesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackBalanceUpdatesCall) Do(f func(context.Context, types.Level) ([]storage.BalanceUpdate, error)) *TransactionRollbackBalanceUpdatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackBalanceUpdatesCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.BalanceUpdate, error)) *TransactionRollbackBalanceUpdatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBalances mocks base method.
func (m *MockTransaction) RollbackBalances(ctx context.Context, ids []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBalances", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackBalances indicates an expected call of RollbackBalances.
func (mr *MockTransactionMockRecorder) RollbackBalances(ctx, ids any) *TransactionRollbackBalancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBalances", reflect.TypeOf((*MockTransaction)(nil).RollbackBalances), ctx, ids)
	return &TransactionRollbackBalancesCall{Call: call}
}

// TransactionRollbackBalancesCall wrap *gomock.Call
type TransactionRollbackBalancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackBalancesCall) Return(arg0 error) *TransactionRollbackBalancesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackBalancesCall) Do(f func(context.Context, []uint64) error) *TransactionRollbackBalancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackBalancesCall) DoAndReturn(f func(context.Context, []uint64) error) *TransactionRollbackBalancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBlock mocks base method.
func (m *MockTransaction) RollbackBlock(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBlock", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackBlock indicates an expected call of RollbackBlock.
func (mr *MockTransactionMockRecorder) RollbackBlock(ctx, height any) *TransactionRollbackBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBlock", reflect.TypeOf((*MockTransaction)(nil).RollbackBlock), ctx, height)
	return &TransactionRollbackBlockCall{Call: call}
}

// TransactionRollbackBlockCall wrap *gomock.Call
type TransactionRollbackBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackBlockCall) Return(arg0 error) *TransactionRollbackBlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackBlockCall) Do(f func(context.Context, types.Level) error) *TransactionRollbackBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackBlockCall) DoAndReturn(f func(context.Context, types.Level) error) *TransactionRollbackBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBlockSignatures mocks base method.
func (m *MockTransaction) RollbackBlockSignatures(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBlockSignatures", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackBlockSignatures indicates an expected call of RollbackBlockSignatures.
func (mr *MockTransactionMockRecorder) RollbackBlockSignatures(ctx, height any) *TransactionRollbackBlockSignaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBlockSignatures", reflect.TypeOf((*MockTransaction)(nil).RollbackBlockSignatures), ctx, height)
	return &TransactionRollbackBlockSignaturesCall{Call: call}
}

// TransactionRollbackBlockSignaturesCall wrap *gomock.Call
type TransactionRollbackBlockSignaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackBlockSignaturesCall) Return(err error) *TransactionRollbackBlockSignaturesCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackBlockSignaturesCall) Do(f func(context.Context, types.Level) error) *TransactionRollbackBlockSignaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackBlockSignaturesCall) DoAndReturn(f func(context.Context, types.Level) error) *TransactionRollbackBlockSignaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBlockStats mocks base method.
func (m *MockTransaction) RollbackBlockStats(ctx context.Context, height types.Level) (storage.BlockStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBlockStats", ctx, height)
	ret0, _ := ret[0].(storage.BlockStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackBlockStats indicates an expected call of RollbackBlockStats.
func (mr *MockTransactionMockRecorder) RollbackBlockStats(ctx, height any) *TransactionRollbackBlockStatsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBlockStats", reflect.TypeOf((*MockTransaction)(nil).RollbackBlockStats), ctx, height)
	return &TransactionRollbackBlockStatsCall{Call: call}
}

// TransactionRollbackBlockStatsCall wrap *gomock.Call
type TransactionRollbackBlockStatsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackBlockStatsCall) Return(stats storage.BlockStats, err error) *TransactionRollbackBlockStatsCall {
	c.Call = c.Call.Return(stats, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackBlockStatsCall) Do(f func(context.Context, types.Level) (storage.BlockStats, error)) *TransactionRollbackBlockStatsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackBlockStatsCall) DoAndReturn(f func(context.Context, types.Level) (storage.BlockStats, error)) *TransactionRollbackBlockStatsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBridges mocks base method.
func (m *MockTransaction) RollbackBridges(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBridges", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackBridges indicates an expected call of RollbackBridges.
func (mr *MockTransactionMockRecorder) RollbackBridges(ctx, height any) *TransactionRollbackBridgesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBridges", reflect.TypeOf((*MockTransaction)(nil).RollbackBridges), ctx, height)
	return &TransactionRollbackBridgesCall{Call: call}
}

// TransactionRollbackBridgesCall wrap *gomock.Call
type TransactionRollbackBridgesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackBridgesCall) Return(arg0 error) *TransactionRollbackBridgesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackBridgesCall) Do(f func(context.Context, types.Level) error) *TransactionRollbackBridgesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackBridgesCall) DoAndReturn(f func(context.Context, types.Level) error) *TransactionRollbackBridgesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackRollupActions mocks base method.
func (m *MockTransaction) RollbackRollupActions(ctx context.Context, height types.Level) ([]storage.RollupAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackRollupActions", ctx, height)
	ret0, _ := ret[0].([]storage.RollupAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackRollupActions indicates an expected call of RollbackRollupActions.
func (mr *MockTransactionMockRecorder) RollbackRollupActions(ctx, height any) *TransactionRollbackRollupActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackRollupActions", reflect.TypeOf((*MockTransaction)(nil).RollbackRollupActions), ctx, height)
	return &TransactionRollbackRollupActionsCall{Call: call}
}

// TransactionRollbackRollupActionsCall wrap *gomock.Call
type TransactionRollbackRollupActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackRollupActionsCall) Return(rollupActions []storage.RollupAction, err error) *TransactionRollbackRollupActionsCall {
	c.Call = c.Call.Return(rollupActions, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackRollupActionsCall) Do(f func(context.Context, types.Level) ([]storage.RollupAction, error)) *TransactionRollbackRollupActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackRollupActionsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.RollupAction, error)) *TransactionRollbackRollupActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackRollupAddresses mocks base method.
func (m *MockTransaction) RollbackRollupAddresses(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackRollupAddresses", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackRollupAddresses indicates an expected call of RollbackRollupAddresses.
func (mr *MockTransactionMockRecorder) RollbackRollupAddresses(ctx, height any) *TransactionRollbackRollupAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackRollupAddresses", reflect.TypeOf((*MockTransaction)(nil).RollbackRollupAddresses), ctx, height)
	return &TransactionRollbackRollupAddressesCall{Call: call}
}

// TransactionRollbackRollupAddressesCall wrap *gomock.Call
type TransactionRollbackRollupAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackRollupAddressesCall) Return(err error) *TransactionRollbackRollupAddressesCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackRollupAddressesCall) Do(f func(context.Context, types.Level) error) *TransactionRollbackRollupAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackRollupAddressesCall) DoAndReturn(f func(context.Context, types.Level) error) *TransactionRollbackRollupAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackRollups mocks base method.
func (m *MockTransaction) RollbackRollups(ctx context.Context, height types.Level) ([]storage.Rollup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackRollups", ctx, height)
	ret0, _ := ret[0].([]storage.Rollup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackRollups indicates an expected call of RollbackRollups.
func (mr *MockTransactionMockRecorder) RollbackRollups(ctx, height any) *TransactionRollbackRollupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackRollups", reflect.TypeOf((*MockTransaction)(nil).RollbackRollups), ctx, height)
	return &TransactionRollbackRollupsCall{Call: call}
}

// TransactionRollbackRollupsCall wrap *gomock.Call
type TransactionRollbackRollupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackRollupsCall) Return(arg0 []storage.Rollup, arg1 error) *TransactionRollbackRollupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackRollupsCall) Do(f func(context.Context, types.Level) ([]storage.Rollup, error)) *TransactionRollbackRollupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackRollupsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Rollup, error)) *TransactionRollbackRollupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackTxs mocks base method.
func (m *MockTransaction) RollbackTxs(ctx context.Context, height types.Level) ([]storage.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTxs", ctx, height)
	ret0, _ := ret[0].([]storage.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackTxs indicates an expected call of RollbackTxs.
func (mr *MockTransactionMockRecorder) RollbackTxs(ctx, height any) *TransactionRollbackTxsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTxs", reflect.TypeOf((*MockTransaction)(nil).RollbackTxs), ctx, height)
	return &TransactionRollbackTxsCall{Call: call}
}

// TransactionRollbackTxsCall wrap *gomock.Call
type TransactionRollbackTxsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackTxsCall) Return(txs []storage.Tx, err error) *TransactionRollbackTxsCall {
	c.Call = c.Call.Return(txs, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackTxsCall) Do(f func(context.Context, types.Level) ([]storage.Tx, error)) *TransactionRollbackTxsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackTxsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Tx, error)) *TransactionRollbackTxsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackValidators mocks base method.
func (m *MockTransaction) RollbackValidators(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackValidators", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackValidators indicates an expected call of RollbackValidators.
func (mr *MockTransactionMockRecorder) RollbackValidators(ctx, height any) *TransactionRollbackValidatorsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackValidators", reflect.TypeOf((*MockTransaction)(nil).RollbackValidators), ctx, height)
	return &TransactionRollbackValidatorsCall{Call: call}
}

// TransactionRollbackValidatorsCall wrap *gomock.Call
type TransactionRollbackValidatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionRollbackValidatorsCall) Return(err error) *TransactionRollbackValidatorsCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionRollbackValidatorsCall) Do(f func(context.Context, types.Level) error) *TransactionRollbackValidatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionRollbackValidatorsCall) DoAndReturn(f func(context.Context, types.Level) error) *TransactionRollbackValidatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveActions mocks base method.
func (m *MockTransaction) SaveActions(ctx context.Context, actions ...*storage.Action) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range actions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveActions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveActions indicates an expected call of SaveActions.
func (mr *MockTransactionMockRecorder) SaveActions(ctx any, actions ...any) *TransactionSaveActionsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, actions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveActions", reflect.TypeOf((*MockTransaction)(nil).SaveActions), varargs...)
	return &TransactionSaveActionsCall{Call: call}
}

// TransactionSaveActionsCall wrap *gomock.Call
type TransactionSaveActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveActionsCall) Return(arg0 error) *TransactionSaveActionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveActionsCall) Do(f func(context.Context, ...*storage.Action) error) *TransactionSaveActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveActionsCall) DoAndReturn(f func(context.Context, ...*storage.Action) error) *TransactionSaveActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveAddressActions mocks base method.
func (m *MockTransaction) SaveAddressActions(ctx context.Context, actions ...*storage.AddressAction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range actions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveAddressActions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAddressActions indicates an expected call of SaveAddressActions.
func (mr *MockTransactionMockRecorder) SaveAddressActions(ctx any, actions ...any) *TransactionSaveAddressActionsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, actions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAddressActions", reflect.TypeOf((*MockTransaction)(nil).SaveAddressActions), varargs...)
	return &TransactionSaveAddressActionsCall{Call: call}
}

// TransactionSaveAddressActionsCall wrap *gomock.Call
type TransactionSaveAddressActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveAddressActionsCall) Return(arg0 error) *TransactionSaveAddressActionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveAddressActionsCall) Do(f func(context.Context, ...*storage.AddressAction) error) *TransactionSaveAddressActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveAddressActionsCall) DoAndReturn(f func(context.Context, ...*storage.AddressAction) error) *TransactionSaveAddressActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveAddresses mocks base method.
func (m *MockTransaction) SaveAddresses(ctx context.Context, addresses ...*storage.Address) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range addresses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveAddresses", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAddresses indicates an expected call of SaveAddresses.
func (mr *MockTransactionMockRecorder) SaveAddresses(ctx any, addresses ...any) *TransactionSaveAddressesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, addresses...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAddresses", reflect.TypeOf((*MockTransaction)(nil).SaveAddresses), varargs...)
	return &TransactionSaveAddressesCall{Call: call}
}

// TransactionSaveAddressesCall wrap *gomock.Call
type TransactionSaveAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveAddressesCall) Return(arg0 int64, arg1 error) *TransactionSaveAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveAddressesCall) Do(f func(context.Context, ...*storage.Address) (int64, error)) *TransactionSaveAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveAddressesCall) DoAndReturn(f func(context.Context, ...*storage.Address) (int64, error)) *TransactionSaveAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBalanceUpdates mocks base method.
func (m *MockTransaction) SaveBalanceUpdates(ctx context.Context, updates ...storage.BalanceUpdate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range updates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBalanceUpdates", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBalanceUpdates indicates an expected call of SaveBalanceUpdates.
func (mr *MockTransactionMockRecorder) SaveBalanceUpdates(ctx any, updates ...any) *TransactionSaveBalanceUpdatesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, updates...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBalanceUpdates", reflect.TypeOf((*MockTransaction)(nil).SaveBalanceUpdates), varargs...)
	return &TransactionSaveBalanceUpdatesCall{Call: call}
}

// TransactionSaveBalanceUpdatesCall wrap *gomock.Call
type TransactionSaveBalanceUpdatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveBalanceUpdatesCall) Return(arg0 error) *TransactionSaveBalanceUpdatesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveBalanceUpdatesCall) Do(f func(context.Context, ...storage.BalanceUpdate) error) *TransactionSaveBalanceUpdatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveBalanceUpdatesCall) DoAndReturn(f func(context.Context, ...storage.BalanceUpdate) error) *TransactionSaveBalanceUpdatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBalances mocks base method.
func (m *MockTransaction) SaveBalances(ctx context.Context, balances ...storage.Balance) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range balances {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBalances", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBalances indicates an expected call of SaveBalances.
func (mr *MockTransactionMockRecorder) SaveBalances(ctx any, balances ...any) *TransactionSaveBalancesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, balances...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBalances", reflect.TypeOf((*MockTransaction)(nil).SaveBalances), varargs...)
	return &TransactionSaveBalancesCall{Call: call}
}

// TransactionSaveBalancesCall wrap *gomock.Call
type TransactionSaveBalancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveBalancesCall) Return(arg0 error) *TransactionSaveBalancesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveBalancesCall) Do(f func(context.Context, ...storage.Balance) error) *TransactionSaveBalancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveBalancesCall) DoAndReturn(f func(context.Context, ...storage.Balance) error) *TransactionSaveBalancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBlockSignatures mocks base method.
func (m *MockTransaction) SaveBlockSignatures(ctx context.Context, signs ...storage.BlockSignature) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range signs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBlockSignatures", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBlockSignatures indicates an expected call of SaveBlockSignatures.
func (mr *MockTransactionMockRecorder) SaveBlockSignatures(ctx any, signs ...any) *TransactionSaveBlockSignaturesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, signs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlockSignatures", reflect.TypeOf((*MockTransaction)(nil).SaveBlockSignatures), varargs...)
	return &TransactionSaveBlockSignaturesCall{Call: call}
}

// TransactionSaveBlockSignaturesCall wrap *gomock.Call
type TransactionSaveBlockSignaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveBlockSignaturesCall) Return(arg0 error) *TransactionSaveBlockSignaturesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveBlockSignaturesCall) Do(f func(context.Context, ...storage.BlockSignature) error) *TransactionSaveBlockSignaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveBlockSignaturesCall) DoAndReturn(f func(context.Context, ...storage.BlockSignature) error) *TransactionSaveBlockSignaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBridges mocks base method.
func (m *MockTransaction) SaveBridges(ctx context.Context, bridges ...*storage.Bridge) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range bridges {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBridges", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBridges indicates an expected call of SaveBridges.
func (mr *MockTransactionMockRecorder) SaveBridges(ctx any, bridges ...any) *TransactionSaveBridgesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, bridges...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBridges", reflect.TypeOf((*MockTransaction)(nil).SaveBridges), varargs...)
	return &TransactionSaveBridgesCall{Call: call}
}

// TransactionSaveBridgesCall wrap *gomock.Call
type TransactionSaveBridgesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveBridgesCall) Return(arg0 error) *TransactionSaveBridgesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveBridgesCall) Do(f func(context.Context, ...*storage.Bridge) error) *TransactionSaveBridgesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveBridgesCall) DoAndReturn(f func(context.Context, ...*storage.Bridge) error) *TransactionSaveBridgesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveConstants mocks base method.
func (m *MockTransaction) SaveConstants(ctx context.Context, constants ...storage.Constant) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range constants {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveConstants", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConstants indicates an expected call of SaveConstants.
func (mr *MockTransactionMockRecorder) SaveConstants(ctx any, constants ...any) *TransactionSaveConstantsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, constants...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConstants", reflect.TypeOf((*MockTransaction)(nil).SaveConstants), varargs...)
	return &TransactionSaveConstantsCall{Call: call}
}

// TransactionSaveConstantsCall wrap *gomock.Call
type TransactionSaveConstantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveConstantsCall) Return(arg0 error) *TransactionSaveConstantsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveConstantsCall) Do(f func(context.Context, ...storage.Constant) error) *TransactionSaveConstantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveConstantsCall) DoAndReturn(f func(context.Context, ...storage.Constant) error) *TransactionSaveConstantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveRollupActions mocks base method.
func (m *MockTransaction) SaveRollupActions(ctx context.Context, actions ...*storage.RollupAction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range actions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveRollupActions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRollupActions indicates an expected call of SaveRollupActions.
func (mr *MockTransactionMockRecorder) SaveRollupActions(ctx any, actions ...any) *TransactionSaveRollupActionsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, actions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRollupActions", reflect.TypeOf((*MockTransaction)(nil).SaveRollupActions), varargs...)
	return &TransactionSaveRollupActionsCall{Call: call}
}

// TransactionSaveRollupActionsCall wrap *gomock.Call
type TransactionSaveRollupActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveRollupActionsCall) Return(arg0 error) *TransactionSaveRollupActionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveRollupActionsCall) Do(f func(context.Context, ...*storage.RollupAction) error) *TransactionSaveRollupActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveRollupActionsCall) DoAndReturn(f func(context.Context, ...*storage.RollupAction) error) *TransactionSaveRollupActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveRollupAddresses mocks base method.
func (m *MockTransaction) SaveRollupAddresses(ctx context.Context, addresses ...*storage.RollupAddress) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range addresses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveRollupAddresses", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRollupAddresses indicates an expected call of SaveRollupAddresses.
func (mr *MockTransactionMockRecorder) SaveRollupAddresses(ctx any, addresses ...any) *TransactionSaveRollupAddressesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, addresses...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRollupAddresses", reflect.TypeOf((*MockTransaction)(nil).SaveRollupAddresses), varargs...)
	return &TransactionSaveRollupAddressesCall{Call: call}
}

// TransactionSaveRollupAddressesCall wrap *gomock.Call
type TransactionSaveRollupAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveRollupAddressesCall) Return(arg0 error) *TransactionSaveRollupAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveRollupAddressesCall) Do(f func(context.Context, ...*storage.RollupAddress) error) *TransactionSaveRollupAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveRollupAddressesCall) DoAndReturn(f func(context.Context, ...*storage.RollupAddress) error) *TransactionSaveRollupAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveRollups mocks base method.
func (m *MockTransaction) SaveRollups(ctx context.Context, rollups ...*storage.Rollup) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range rollups {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveRollups", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRollups indicates an expected call of SaveRollups.
func (mr *MockTransactionMockRecorder) SaveRollups(ctx any, rollups ...any) *TransactionSaveRollupsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, rollups...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRollups", reflect.TypeOf((*MockTransaction)(nil).SaveRollups), varargs...)
	return &TransactionSaveRollupsCall{Call: call}
}

// TransactionSaveRollupsCall wrap *gomock.Call
type TransactionSaveRollupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveRollupsCall) Return(arg0 int64, arg1 error) *TransactionSaveRollupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveRollupsCall) Do(f func(context.Context, ...*storage.Rollup) (int64, error)) *TransactionSaveRollupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveRollupsCall) DoAndReturn(f func(context.Context, ...*storage.Rollup) (int64, error)) *TransactionSaveRollupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveTransactions mocks base method.
func (m *MockTransaction) SaveTransactions(ctx context.Context, txs ...*storage.Tx) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range txs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveTransactions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTransactions indicates an expected call of SaveTransactions.
func (mr *MockTransactionMockRecorder) SaveTransactions(ctx any, txs ...any) *TransactionSaveTransactionsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, txs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransactions", reflect.TypeOf((*MockTransaction)(nil).SaveTransactions), varargs...)
	return &TransactionSaveTransactionsCall{Call: call}
}

// TransactionSaveTransactionsCall wrap *gomock.Call
type TransactionSaveTransactionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveTransactionsCall) Return(arg0 error) *TransactionSaveTransactionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveTransactionsCall) Do(f func(context.Context, ...*storage.Tx) error) *TransactionSaveTransactionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveTransactionsCall) DoAndReturn(f func(context.Context, ...*storage.Tx) error) *TransactionSaveTransactionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveValidators mocks base method.
func (m *MockTransaction) SaveValidators(ctx context.Context, validators ...*storage.Validator) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range validators {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveValidators", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveValidators indicates an expected call of SaveValidators.
func (mr *MockTransactionMockRecorder) SaveValidators(ctx any, validators ...any) *TransactionSaveValidatorsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, validators...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveValidators", reflect.TypeOf((*MockTransaction)(nil).SaveValidators), varargs...)
	return &TransactionSaveValidatorsCall{Call: call}
}

// TransactionSaveValidatorsCall wrap *gomock.Call
type TransactionSaveValidatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionSaveValidatorsCall) Return(arg0 error) *TransactionSaveValidatorsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionSaveValidatorsCall) Do(f func(context.Context, ...*storage.Validator) error) *TransactionSaveValidatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionSaveValidatorsCall) DoAndReturn(f func(context.Context, ...*storage.Validator) error) *TransactionSaveValidatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// State mocks base method.
func (m *MockTransaction) State(ctx context.Context, name string) (storage.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State", ctx, name)
	ret0, _ := ret[0].(storage.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockTransactionMockRecorder) State(ctx, name any) *TransactionStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockTransaction)(nil).State), ctx, name)
	return &TransactionStateCall{Call: call}
}

// TransactionStateCall wrap *gomock.Call
type TransactionStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionStateCall) Return(state storage.State, err error) *TransactionStateCall {
	c.Call = c.Call.Return(state, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionStateCall) Do(f func(context.Context, string) (storage.State, error)) *TransactionStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionStateCall) DoAndReturn(f func(context.Context, string) (storage.State, error)) *TransactionStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tx mocks base method.
func (m *MockTransaction) Tx() *bun.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(*bun.Tx)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockTransactionMockRecorder) Tx() *TransactionTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockTransaction)(nil).Tx))
	return &TransactionTxCall{Call: call}
}

// TransactionTxCall wrap *gomock.Call
type TransactionTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionTxCall) Return(arg0 *bun.Tx) *TransactionTxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionTxCall) Do(f func() *bun.Tx) *TransactionTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionTxCall) DoAndReturn(f func() *bun.Tx) *TransactionTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockTransaction) Update(ctx context.Context, model any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransactionMockRecorder) Update(ctx, model any) *TransactionUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransaction)(nil).Update), ctx, model)
	return &TransactionUpdateCall{Call: call}
}

// TransactionUpdateCall wrap *gomock.Call
type TransactionUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionUpdateCall) Return(arg0 error) *TransactionUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionUpdateCall) Do(f func(context.Context, any) error) *TransactionUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionUpdateCall) DoAndReturn(f func(context.Context, any) error) *TransactionUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAddresses mocks base method.
func (m *MockTransaction) UpdateAddresses(ctx context.Context, address ...*storage.Address) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range address {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAddresses", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddresses indicates an expected call of UpdateAddresses.
func (mr *MockTransactionMockRecorder) UpdateAddresses(ctx any, address ...any) *TransactionUpdateAddressesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, address...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddresses", reflect.TypeOf((*MockTransaction)(nil).UpdateAddresses), varargs...)
	return &TransactionUpdateAddressesCall{Call: call}
}

// TransactionUpdateAddressesCall wrap *gomock.Call
type TransactionUpdateAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionUpdateAddressesCall) Return(arg0 error) *TransactionUpdateAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionUpdateAddressesCall) Do(f func(context.Context, ...*storage.Address) error) *TransactionUpdateAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionUpdateAddressesCall) DoAndReturn(f func(context.Context, ...*storage.Address) error) *TransactionUpdateAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateConstants mocks base method.
func (m *MockTransaction) UpdateConstants(ctx context.Context, constants ...*storage.Constant) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range constants {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConstants", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConstants indicates an expected call of UpdateConstants.
func (mr *MockTransactionMockRecorder) UpdateConstants(ctx any, constants ...any) *TransactionUpdateConstantsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, constants...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConstants", reflect.TypeOf((*MockTransaction)(nil).UpdateConstants), varargs...)
	return &TransactionUpdateConstantsCall{Call: call}
}

// TransactionUpdateConstantsCall wrap *gomock.Call
type TransactionUpdateConstantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionUpdateConstantsCall) Return(arg0 error) *TransactionUpdateConstantsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionUpdateConstantsCall) Do(f func(context.Context, ...*storage.Constant) error) *TransactionUpdateConstantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionUpdateConstantsCall) DoAndReturn(f func(context.Context, ...*storage.Constant) error) *TransactionUpdateConstantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateRollups mocks base method.
func (m *MockTransaction) UpdateRollups(ctx context.Context, rollups ...*storage.Rollup) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range rollups {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRollups", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRollups indicates an expected call of UpdateRollups.
func (mr *MockTransactionMockRecorder) UpdateRollups(ctx any, rollups ...any) *TransactionUpdateRollupsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, rollups...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRollups", reflect.TypeOf((*MockTransaction)(nil).UpdateRollups), varargs...)
	return &TransactionUpdateRollupsCall{Call: call}
}

// TransactionUpdateRollupsCall wrap *gomock.Call
type TransactionUpdateRollupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionUpdateRollupsCall) Return(arg0 error) *TransactionUpdateRollupsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionUpdateRollupsCall) Do(f func(context.Context, ...*storage.Rollup) error) *TransactionUpdateRollupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionUpdateRollupsCall) DoAndReturn(f func(context.Context, ...*storage.Rollup) error) *TransactionUpdateRollupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateValidators mocks base method.
func (m *MockTransaction) UpdateValidators(ctx context.Context, validators ...*storage.Validator) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range validators {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateValidators", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValidators indicates an expected call of UpdateValidators.
func (mr *MockTransactionMockRecorder) UpdateValidators(ctx any, validators ...any) *TransactionUpdateValidatorsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, validators...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValidators", reflect.TypeOf((*MockTransaction)(nil).UpdateValidators), varargs...)
	return &TransactionUpdateValidatorsCall{Call: call}
}

// TransactionUpdateValidatorsCall wrap *gomock.Call
type TransactionUpdateValidatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionUpdateValidatorsCall) Return(arg0 error) *TransactionUpdateValidatorsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionUpdateValidatorsCall) Do(f func(context.Context, ...*storage.Validator) error) *TransactionUpdateValidatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionUpdateValidatorsCall) DoAndReturn(f func(context.Context, ...*storage.Validator) error) *TransactionUpdateValidatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validators mocks base method.
func (m *MockTransaction) Validators(ctx context.Context) ([]storage.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators", ctx)
	ret0, _ := ret[0].([]storage.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validators indicates an expected call of Validators.
func (mr *MockTransactionMockRecorder) Validators(ctx any) *TransactionValidatorsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockTransaction)(nil).Validators), ctx)
	return &TransactionValidatorsCall{Call: call}
}

// TransactionValidatorsCall wrap *gomock.Call
type TransactionValidatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionValidatorsCall) Return(arg0 []storage.Validator, arg1 error) *TransactionValidatorsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionValidatorsCall) Do(f func(context.Context) ([]storage.Validator, error)) *TransactionValidatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionValidatorsCall) DoAndReturn(f func(context.Context) ([]storage.Validator, error)) *TransactionValidatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockISearch is a mock of ISearch interface.
type MockISearch struct {
	ctrl     *gomock.Controller
	recorder *MockISearchMockRecorder
}

// MockISearchMockRecorder is the mock recorder for MockISearch.
type MockISearchMockRecorder struct {
	mock *MockISearch
}

// NewMockISearch creates a new mock instance.
func NewMockISearch(ctrl *gomock.Controller) *MockISearch {
	mock := &MockISearch{ctrl: ctrl}
	mock.recorder = &MockISearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISearch) EXPECT() *MockISearchMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockISearch) Search(ctx context.Context, query string) ([]storage.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].([]storage.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockISearchMockRecorder) Search(ctx, query any) *ISearchSearchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockISearch)(nil).Search), ctx, query)
	return &ISearchSearchCall{Call: call}
}

// ISearchSearchCall wrap *gomock.Call
type ISearchSearchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ISearchSearchCall) Return(arg0 []storage.SearchResult, arg1 error) *ISearchSearchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ISearchSearchCall) Do(f func(context.Context, string) ([]storage.SearchResult, error)) *ISearchSearchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ISearchSearchCall) DoAndReturn(f func(context.Context, string) ([]storage.SearchResult, error)) *ISearchSearchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNotificator is a mock of Notificator interface.
type MockNotificator struct {
	ctrl     *gomock.Controller
	recorder *MockNotificatorMockRecorder
}

// MockNotificatorMockRecorder is the mock recorder for MockNotificator.
type MockNotificatorMockRecorder struct {
	mock *MockNotificator
}

// NewMockNotificator creates a new mock instance.
func NewMockNotificator(ctrl *gomock.Controller) *MockNotificator {
	mock := &MockNotificator{ctrl: ctrl}
	mock.recorder = &MockNotificatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificator) EXPECT() *MockNotificatorMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockNotificator) Notify(ctx context.Context, channel, payload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, channel, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockNotificatorMockRecorder) Notify(ctx, channel, payload any) *NotificatorNotifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotificator)(nil).Notify), ctx, channel, payload)
	return &NotificatorNotifyCall{Call: call}
}

// NotificatorNotifyCall wrap *gomock.Call
type NotificatorNotifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *NotificatorNotifyCall) Return(arg0 error) *NotificatorNotifyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *NotificatorNotifyCall) Do(f func(context.Context, string, string) error) *NotificatorNotifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *NotificatorNotifyCall) DoAndReturn(f func(context.Context, string, string) error) *NotificatorNotifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockListener is a mock of Listener interface.
type MockListener struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder
}

// MockListenerMockRecorder is the mock recorder for MockListener.
type MockListenerMockRecorder struct {
	mock *MockListener
}

// NewMockListener creates a new mock instance.
func NewMockListener(ctrl *gomock.Controller) *MockListener {
	mock := &MockListener{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListener) EXPECT() *MockListenerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockListener) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockListenerMockRecorder) Close() *ListenerCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockListener)(nil).Close))
	return &ListenerCloseCall{Call: call}
}

// ListenerCloseCall wrap *gomock.Call
type ListenerCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ListenerCloseCall) Return(arg0 error) *ListenerCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ListenerCloseCall) Do(f func() error) *ListenerCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ListenerCloseCall) DoAndReturn(f func() error) *ListenerCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Listen mocks base method.
func (m *MockListener) Listen() chan *pq.Notification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen")
	ret0, _ := ret[0].(chan *pq.Notification)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockListenerMockRecorder) Listen() *ListenerListenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockListener)(nil).Listen))
	return &ListenerListenCall{Call: call}
}

// ListenerListenCall wrap *gomock.Call
type ListenerListenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ListenerListenCall) Return(arg0 chan *pq.Notification) *ListenerListenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ListenerListenCall) Do(f func() chan *pq.Notification) *ListenerListenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ListenerListenCall) DoAndReturn(f func() chan *pq.Notification) *ListenerListenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subscribe mocks base method.
func (m *MockListener) Subscribe(ctx context.Context, channels ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockListenerMockRecorder) Subscribe(ctx any, channels ...any) *ListenerSubscribeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, channels...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockListener)(nil).Subscribe), varargs...)
	return &ListenerSubscribeCall{Call: call}
}

// ListenerSubscribeCall wrap *gomock.Call
type ListenerSubscribeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ListenerSubscribeCall) Return(arg0 error) *ListenerSubscribeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ListenerSubscribeCall) Do(f func(context.Context, ...string) error) *ListenerSubscribeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ListenerSubscribeCall) DoAndReturn(f func(context.Context, ...string) error) *ListenerSubscribeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockListenerFactory is a mock of ListenerFactory interface.
type MockListenerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockListenerFactoryMockRecorder
}

// MockListenerFactoryMockRecorder is the mock recorder for MockListenerFactory.
type MockListenerFactoryMockRecorder struct {
	mock *MockListenerFactory
}

// NewMockListenerFactory creates a new mock instance.
func NewMockListenerFactory(ctrl *gomock.Controller) *MockListenerFactory {
	mock := &MockListenerFactory{ctrl: ctrl}
	mock.recorder = &MockListenerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerFactory) EXPECT() *MockListenerFactoryMockRecorder {
	return m.recorder
}

// CreateListener mocks base method.
func (m *MockListenerFactory) CreateListener() storage.Listener {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListener")
	ret0, _ := ret[0].(storage.Listener)
	return ret0
}

// CreateListener indicates an expected call of CreateListener.
func (mr *MockListenerFactoryMockRecorder) CreateListener() *ListenerFactoryCreateListenerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListener", reflect.TypeOf((*MockListenerFactory)(nil).CreateListener))
	return &ListenerFactoryCreateListenerCall{Call: call}
}

// ListenerFactoryCreateListenerCall wrap *gomock.Call
type ListenerFactoryCreateListenerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ListenerFactoryCreateListenerCall) Return(arg0 storage.Listener) *ListenerFactoryCreateListenerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ListenerFactoryCreateListenerCall) Do(f func() storage.Listener) *ListenerFactoryCreateListenerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ListenerFactoryCreateListenerCall) DoAndReturn(f func() storage.Listener) *ListenerFactoryCreateListenerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
