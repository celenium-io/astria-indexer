// SPDX-FileCopyrightText: 2025 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by MockGen. DO NOT EDIT.
// Source: generic.go
//
// Generated by this command:
//
//	mockgen -source=generic.go -destination=mock/generic.go -package=mock -typed
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	storage "github.com/celenium-io/astria-indexer/internal/storage"
	types "github.com/celenium-io/astria-indexer/pkg/types"
	storage0 "github.com/dipdup-net/indexer-sdk/pkg/storage"
	pq "github.com/lib/pq"
	bun "github.com/uptrace/bun"
	gomock "go.uber.org/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTransaction) Add(ctx context.Context, model any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTransactionMockRecorder) Add(ctx, model any) *MockTransactionAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTransaction)(nil).Add), ctx, model)
	return &MockTransactionAddCall{Call: call}
}

// MockTransactionAddCall wrap *gomock.Call
type MockTransactionAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionAddCall) Return(arg0 error) *MockTransactionAddCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionAddCall) Do(f func(context.Context, any) error) *MockTransactionAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionAddCall) DoAndReturn(f func(context.Context, any) error) *MockTransactionAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BulkSave mocks base method.
func (m *MockTransaction) BulkSave(ctx context.Context, models []any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkSave", ctx, models)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkSave indicates an expected call of BulkSave.
func (mr *MockTransactionMockRecorder) BulkSave(ctx, models any) *MockTransactionBulkSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkSave", reflect.TypeOf((*MockTransaction)(nil).BulkSave), ctx, models)
	return &MockTransactionBulkSaveCall{Call: call}
}

// MockTransactionBulkSaveCall wrap *gomock.Call
type MockTransactionBulkSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionBulkSaveCall) Return(arg0 error) *MockTransactionBulkSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionBulkSaveCall) Do(f func(context.Context, []any) error) *MockTransactionBulkSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionBulkSaveCall) DoAndReturn(f func(context.Context, []any) error) *MockTransactionBulkSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockTransaction) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTransactionMockRecorder) Close(ctx any) *MockTransactionCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTransaction)(nil).Close), ctx)
	return &MockTransactionCloseCall{Call: call}
}

// MockTransactionCloseCall wrap *gomock.Call
type MockTransactionCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionCloseCall) Return(arg0 error) *MockTransactionCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionCloseCall) Do(f func(context.Context) error) *MockTransactionCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionCloseCall) DoAndReturn(f func(context.Context) error) *MockTransactionCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CopyFrom mocks base method.
func (m *MockTransaction) CopyFrom(ctx context.Context, tableName string, data []storage0.Copiable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFrom", ctx, tableName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFrom indicates an expected call of CopyFrom.
func (mr *MockTransactionMockRecorder) CopyFrom(ctx, tableName, data any) *MockTransactionCopyFromCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFrom", reflect.TypeOf((*MockTransaction)(nil).CopyFrom), ctx, tableName, data)
	return &MockTransactionCopyFromCall{Call: call}
}

// MockTransactionCopyFromCall wrap *gomock.Call
type MockTransactionCopyFromCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionCopyFromCall) Return(arg0 error) *MockTransactionCopyFromCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionCopyFromCall) Do(f func(context.Context, string, []storage0.Copiable) error) *MockTransactionCopyFromCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionCopyFromCall) DoAndReturn(f func(context.Context, string, []storage0.Copiable) error) *MockTransactionCopyFromCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteApp mocks base method.
func (m *MockTransaction) DeleteApp(ctx context.Context, appId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", ctx, appId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockTransactionMockRecorder) DeleteApp(ctx, appId any) *MockTransactionDeleteAppCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockTransaction)(nil).DeleteApp), ctx, appId)
	return &MockTransactionDeleteAppCall{Call: call}
}

// MockTransactionDeleteAppCall wrap *gomock.Call
type MockTransactionDeleteAppCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionDeleteAppCall) Return(arg0 error) *MockTransactionDeleteAppCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionDeleteAppCall) Do(f func(context.Context, uint64) error) *MockTransactionDeleteAppCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionDeleteAppCall) DoAndReturn(f func(context.Context, uint64) error) *MockTransactionDeleteAppCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Exec mocks base method.
func (m *MockTransaction) Exec(ctx context.Context, query string, params ...any) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockTransactionMockRecorder) Exec(ctx, query any, params ...any) *MockTransactionExecCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, params...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTransaction)(nil).Exec), varargs...)
	return &MockTransactionExecCall{Call: call}
}

// MockTransactionExecCall wrap *gomock.Call
type MockTransactionExecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionExecCall) Return(arg0 int64, arg1 error) *MockTransactionExecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionExecCall) Do(f func(context.Context, string, ...any) (int64, error)) *MockTransactionExecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionExecCall) DoAndReturn(f func(context.Context, string, ...any) (int64, error)) *MockTransactionExecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Flush mocks base method.
func (m *MockTransaction) Flush(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockTransactionMockRecorder) Flush(ctx any) *MockTransactionFlushCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockTransaction)(nil).Flush), ctx)
	return &MockTransactionFlushCall{Call: call}
}

// MockTransactionFlushCall wrap *gomock.Call
type MockTransactionFlushCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionFlushCall) Return(arg0 error) *MockTransactionFlushCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionFlushCall) Do(f func(context.Context) error) *MockTransactionFlushCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionFlushCall) DoAndReturn(f func(context.Context) error) *MockTransactionFlushCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAddressId mocks base method.
func (m *MockTransaction) GetAddressId(ctx context.Context, hash string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressId", ctx, hash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressId indicates an expected call of GetAddressId.
func (mr *MockTransactionMockRecorder) GetAddressId(ctx, hash any) *MockTransactionGetAddressIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressId", reflect.TypeOf((*MockTransaction)(nil).GetAddressId), ctx, hash)
	return &MockTransactionGetAddressIdCall{Call: call}
}

// MockTransactionGetAddressIdCall wrap *gomock.Call
type MockTransactionGetAddressIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionGetAddressIdCall) Return(arg0 uint64, arg1 error) *MockTransactionGetAddressIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionGetAddressIdCall) Do(f func(context.Context, string) (uint64, error)) *MockTransactionGetAddressIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionGetAddressIdCall) DoAndReturn(f func(context.Context, string) (uint64, error)) *MockTransactionGetAddressIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBridgeIdByAddressId mocks base method.
func (m *MockTransaction) GetBridgeIdByAddressId(ctx context.Context, id uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBridgeIdByAddressId", ctx, id)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBridgeIdByAddressId indicates an expected call of GetBridgeIdByAddressId.
func (mr *MockTransactionMockRecorder) GetBridgeIdByAddressId(ctx, id any) *MockTransactionGetBridgeIdByAddressIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBridgeIdByAddressId", reflect.TypeOf((*MockTransaction)(nil).GetBridgeIdByAddressId), ctx, id)
	return &MockTransactionGetBridgeIdByAddressIdCall{Call: call}
}

// MockTransactionGetBridgeIdByAddressIdCall wrap *gomock.Call
type MockTransactionGetBridgeIdByAddressIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionGetBridgeIdByAddressIdCall) Return(arg0 uint64, arg1 error) *MockTransactionGetBridgeIdByAddressIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionGetBridgeIdByAddressIdCall) Do(f func(context.Context, uint64) (uint64, error)) *MockTransactionGetBridgeIdByAddressIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionGetBridgeIdByAddressIdCall) DoAndReturn(f func(context.Context, uint64) (uint64, error)) *MockTransactionGetBridgeIdByAddressIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProposerId mocks base method.
func (m *MockTransaction) GetProposerId(ctx context.Context, address string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposerId", ctx, address)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposerId indicates an expected call of GetProposerId.
func (mr *MockTransactionMockRecorder) GetProposerId(ctx, address any) *MockTransactionGetProposerIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposerId", reflect.TypeOf((*MockTransaction)(nil).GetProposerId), ctx, address)
	return &MockTransactionGetProposerIdCall{Call: call}
}

// MockTransactionGetProposerIdCall wrap *gomock.Call
type MockTransactionGetProposerIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionGetProposerIdCall) Return(arg0 uint64, arg1 error) *MockTransactionGetProposerIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionGetProposerIdCall) Do(f func(context.Context, string) (uint64, error)) *MockTransactionGetProposerIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionGetProposerIdCall) DoAndReturn(f func(context.Context, string) (uint64, error)) *MockTransactionGetProposerIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRollup mocks base method.
func (m *MockTransaction) GetRollup(ctx context.Context, rollupId []byte) (storage.Rollup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRollup", ctx, rollupId)
	ret0, _ := ret[0].(storage.Rollup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRollup indicates an expected call of GetRollup.
func (mr *MockTransactionMockRecorder) GetRollup(ctx, rollupId any) *MockTransactionGetRollupCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRollup", reflect.TypeOf((*MockTransaction)(nil).GetRollup), ctx, rollupId)
	return &MockTransactionGetRollupCall{Call: call}
}

// MockTransactionGetRollupCall wrap *gomock.Call
type MockTransactionGetRollupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionGetRollupCall) Return(arg0 storage.Rollup, arg1 error) *MockTransactionGetRollupCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionGetRollupCall) Do(f func(context.Context, []byte) (storage.Rollup, error)) *MockTransactionGetRollupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionGetRollupCall) DoAndReturn(f func(context.Context, []byte) (storage.Rollup, error)) *MockTransactionGetRollupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HandleError mocks base method.
func (m *MockTransaction) HandleError(ctx context.Context, err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleError", ctx, err)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleError indicates an expected call of HandleError.
func (mr *MockTransactionMockRecorder) HandleError(ctx, err any) *MockTransactionHandleErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockTransaction)(nil).HandleError), ctx, err)
	return &MockTransactionHandleErrorCall{Call: call}
}

// MockTransactionHandleErrorCall wrap *gomock.Call
type MockTransactionHandleErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionHandleErrorCall) Return(arg0 error) *MockTransactionHandleErrorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionHandleErrorCall) Do(f func(context.Context, error) error) *MockTransactionHandleErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionHandleErrorCall) DoAndReturn(f func(context.Context, error) error) *MockTransactionHandleErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastBlock mocks base method.
func (m *MockTransaction) LastBlock(ctx context.Context) (storage.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastBlock", ctx)
	ret0, _ := ret[0].(storage.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastBlock indicates an expected call of LastBlock.
func (mr *MockTransactionMockRecorder) LastBlock(ctx any) *MockTransactionLastBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastBlock", reflect.TypeOf((*MockTransaction)(nil).LastBlock), ctx)
	return &MockTransactionLastBlockCall{Call: call}
}

// MockTransactionLastBlockCall wrap *gomock.Call
type MockTransactionLastBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionLastBlockCall) Return(block storage.Block, err error) *MockTransactionLastBlockCall {
	c.Call = c.Call.Return(block, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionLastBlockCall) Do(f func(context.Context) (storage.Block, error)) *MockTransactionLastBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionLastBlockCall) DoAndReturn(f func(context.Context) (storage.Block, error)) *MockTransactionLastBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LastNonce mocks base method.
func (m *MockTransaction) LastNonce(ctx context.Context, id uint64) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastNonce", ctx, id)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastNonce indicates an expected call of LastNonce.
func (mr *MockTransactionMockRecorder) LastNonce(ctx, id any) *MockTransactionLastNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastNonce", reflect.TypeOf((*MockTransaction)(nil).LastNonce), ctx, id)
	return &MockTransactionLastNonceCall{Call: call}
}

// MockTransactionLastNonceCall wrap *gomock.Call
type MockTransactionLastNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionLastNonceCall) Return(arg0 uint32, arg1 error) *MockTransactionLastNonceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionLastNonceCall) Do(f func(context.Context, uint64) (uint32, error)) *MockTransactionLastNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionLastNonceCall) DoAndReturn(f func(context.Context, uint64) (uint32, error)) *MockTransactionLastNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RefreshLeaderboard mocks base method.
func (m *MockTransaction) RefreshLeaderboard(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshLeaderboard", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshLeaderboard indicates an expected call of RefreshLeaderboard.
func (mr *MockTransactionMockRecorder) RefreshLeaderboard(ctx any) *MockTransactionRefreshLeaderboardCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshLeaderboard", reflect.TypeOf((*MockTransaction)(nil).RefreshLeaderboard), ctx)
	return &MockTransactionRefreshLeaderboardCall{Call: call}
}

// MockTransactionRefreshLeaderboardCall wrap *gomock.Call
type MockTransactionRefreshLeaderboardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRefreshLeaderboardCall) Return(arg0 error) *MockTransactionRefreshLeaderboardCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRefreshLeaderboardCall) Do(f func(context.Context) error) *MockTransactionRefreshLeaderboardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRefreshLeaderboardCall) DoAndReturn(f func(context.Context) error) *MockTransactionRefreshLeaderboardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RetentionBlockSignatures mocks base method.
func (m *MockTransaction) RetentionBlockSignatures(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetentionBlockSignatures", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetentionBlockSignatures indicates an expected call of RetentionBlockSignatures.
func (mr *MockTransactionMockRecorder) RetentionBlockSignatures(ctx, height any) *MockTransactionRetentionBlockSignaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetentionBlockSignatures", reflect.TypeOf((*MockTransaction)(nil).RetentionBlockSignatures), ctx, height)
	return &MockTransactionRetentionBlockSignaturesCall{Call: call}
}

// MockTransactionRetentionBlockSignaturesCall wrap *gomock.Call
type MockTransactionRetentionBlockSignaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRetentionBlockSignaturesCall) Return(arg0 error) *MockTransactionRetentionBlockSignaturesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRetentionBlockSignaturesCall) Do(f func(context.Context, types.Level) error) *MockTransactionRetentionBlockSignaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRetentionBlockSignaturesCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRetentionBlockSignaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback(ctx any) *MockTransactionRollbackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback), ctx)
	return &MockTransactionRollbackCall{Call: call}
}

// MockTransactionRollbackCall wrap *gomock.Call
type MockTransactionRollbackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackCall) Return(arg0 error) *MockTransactionRollbackCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackCall) Do(f func(context.Context) error) *MockTransactionRollbackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackCall) DoAndReturn(f func(context.Context) error) *MockTransactionRollbackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackActions mocks base method.
func (m *MockTransaction) RollbackActions(ctx context.Context, height types.Level) ([]storage.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackActions", ctx, height)
	ret0, _ := ret[0].([]storage.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackActions indicates an expected call of RollbackActions.
func (mr *MockTransactionMockRecorder) RollbackActions(ctx, height any) *MockTransactionRollbackActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackActions", reflect.TypeOf((*MockTransaction)(nil).RollbackActions), ctx, height)
	return &MockTransactionRollbackActionsCall{Call: call}
}

// MockTransactionRollbackActionsCall wrap *gomock.Call
type MockTransactionRollbackActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackActionsCall) Return(actions []storage.Action, err error) *MockTransactionRollbackActionsCall {
	c.Call = c.Call.Return(actions, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackActionsCall) Do(f func(context.Context, types.Level) ([]storage.Action, error)) *MockTransactionRollbackActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackActionsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Action, error)) *MockTransactionRollbackActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackAddressActions mocks base method.
func (m *MockTransaction) RollbackAddressActions(ctx context.Context, height types.Level) ([]storage.AddressAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackAddressActions", ctx, height)
	ret0, _ := ret[0].([]storage.AddressAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackAddressActions indicates an expected call of RollbackAddressActions.
func (mr *MockTransactionMockRecorder) RollbackAddressActions(ctx, height any) *MockTransactionRollbackAddressActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackAddressActions", reflect.TypeOf((*MockTransaction)(nil).RollbackAddressActions), ctx, height)
	return &MockTransactionRollbackAddressActionsCall{Call: call}
}

// MockTransactionRollbackAddressActionsCall wrap *gomock.Call
type MockTransactionRollbackAddressActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackAddressActionsCall) Return(addrActions []storage.AddressAction, err error) *MockTransactionRollbackAddressActionsCall {
	c.Call = c.Call.Return(addrActions, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackAddressActionsCall) Do(f func(context.Context, types.Level) ([]storage.AddressAction, error)) *MockTransactionRollbackAddressActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackAddressActionsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.AddressAction, error)) *MockTransactionRollbackAddressActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackAddresses mocks base method.
func (m *MockTransaction) RollbackAddresses(ctx context.Context, height types.Level) ([]storage.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackAddresses", ctx, height)
	ret0, _ := ret[0].([]storage.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackAddresses indicates an expected call of RollbackAddresses.
func (mr *MockTransactionMockRecorder) RollbackAddresses(ctx, height any) *MockTransactionRollbackAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackAddresses", reflect.TypeOf((*MockTransaction)(nil).RollbackAddresses), ctx, height)
	return &MockTransactionRollbackAddressesCall{Call: call}
}

// MockTransactionRollbackAddressesCall wrap *gomock.Call
type MockTransactionRollbackAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackAddressesCall) Return(address []storage.Address, err error) *MockTransactionRollbackAddressesCall {
	c.Call = c.Call.Return(address, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackAddressesCall) Do(f func(context.Context, types.Level) ([]storage.Address, error)) *MockTransactionRollbackAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackAddressesCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Address, error)) *MockTransactionRollbackAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBalanceUpdates mocks base method.
func (m *MockTransaction) RollbackBalanceUpdates(ctx context.Context, height types.Level) ([]storage.BalanceUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBalanceUpdates", ctx, height)
	ret0, _ := ret[0].([]storage.BalanceUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackBalanceUpdates indicates an expected call of RollbackBalanceUpdates.
func (mr *MockTransactionMockRecorder) RollbackBalanceUpdates(ctx, height any) *MockTransactionRollbackBalanceUpdatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBalanceUpdates", reflect.TypeOf((*MockTransaction)(nil).RollbackBalanceUpdates), ctx, height)
	return &MockTransactionRollbackBalanceUpdatesCall{Call: call}
}

// MockTransactionRollbackBalanceUpdatesCall wrap *gomock.Call
type MockTransactionRollbackBalanceUpdatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackBalanceUpdatesCall) Return(arg0 []storage.BalanceUpdate, arg1 error) *MockTransactionRollbackBalanceUpdatesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackBalanceUpdatesCall) Do(f func(context.Context, types.Level) ([]storage.BalanceUpdate, error)) *MockTransactionRollbackBalanceUpdatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackBalanceUpdatesCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.BalanceUpdate, error)) *MockTransactionRollbackBalanceUpdatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBalances mocks base method.
func (m *MockTransaction) RollbackBalances(ctx context.Context, ids []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBalances", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackBalances indicates an expected call of RollbackBalances.
func (mr *MockTransactionMockRecorder) RollbackBalances(ctx, ids any) *MockTransactionRollbackBalancesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBalances", reflect.TypeOf((*MockTransaction)(nil).RollbackBalances), ctx, ids)
	return &MockTransactionRollbackBalancesCall{Call: call}
}

// MockTransactionRollbackBalancesCall wrap *gomock.Call
type MockTransactionRollbackBalancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackBalancesCall) Return(arg0 error) *MockTransactionRollbackBalancesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackBalancesCall) Do(f func(context.Context, []uint64) error) *MockTransactionRollbackBalancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackBalancesCall) DoAndReturn(f func(context.Context, []uint64) error) *MockTransactionRollbackBalancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBlock mocks base method.
func (m *MockTransaction) RollbackBlock(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBlock", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackBlock indicates an expected call of RollbackBlock.
func (mr *MockTransactionMockRecorder) RollbackBlock(ctx, height any) *MockTransactionRollbackBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBlock", reflect.TypeOf((*MockTransaction)(nil).RollbackBlock), ctx, height)
	return &MockTransactionRollbackBlockCall{Call: call}
}

// MockTransactionRollbackBlockCall wrap *gomock.Call
type MockTransactionRollbackBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackBlockCall) Return(arg0 error) *MockTransactionRollbackBlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackBlockCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackBlockCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBlockSignatures mocks base method.
func (m *MockTransaction) RollbackBlockSignatures(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBlockSignatures", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackBlockSignatures indicates an expected call of RollbackBlockSignatures.
func (mr *MockTransactionMockRecorder) RollbackBlockSignatures(ctx, height any) *MockTransactionRollbackBlockSignaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBlockSignatures", reflect.TypeOf((*MockTransaction)(nil).RollbackBlockSignatures), ctx, height)
	return &MockTransactionRollbackBlockSignaturesCall{Call: call}
}

// MockTransactionRollbackBlockSignaturesCall wrap *gomock.Call
type MockTransactionRollbackBlockSignaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackBlockSignaturesCall) Return(err error) *MockTransactionRollbackBlockSignaturesCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackBlockSignaturesCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackBlockSignaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackBlockSignaturesCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackBlockSignaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBlockStats mocks base method.
func (m *MockTransaction) RollbackBlockStats(ctx context.Context, height types.Level) (storage.BlockStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBlockStats", ctx, height)
	ret0, _ := ret[0].(storage.BlockStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackBlockStats indicates an expected call of RollbackBlockStats.
func (mr *MockTransactionMockRecorder) RollbackBlockStats(ctx, height any) *MockTransactionRollbackBlockStatsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBlockStats", reflect.TypeOf((*MockTransaction)(nil).RollbackBlockStats), ctx, height)
	return &MockTransactionRollbackBlockStatsCall{Call: call}
}

// MockTransactionRollbackBlockStatsCall wrap *gomock.Call
type MockTransactionRollbackBlockStatsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackBlockStatsCall) Return(stats storage.BlockStats, err error) *MockTransactionRollbackBlockStatsCall {
	c.Call = c.Call.Return(stats, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackBlockStatsCall) Do(f func(context.Context, types.Level) (storage.BlockStats, error)) *MockTransactionRollbackBlockStatsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackBlockStatsCall) DoAndReturn(f func(context.Context, types.Level) (storage.BlockStats, error)) *MockTransactionRollbackBlockStatsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackBridges mocks base method.
func (m *MockTransaction) RollbackBridges(ctx context.Context, height types.Level) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBridges", ctx, height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackBridges indicates an expected call of RollbackBridges.
func (mr *MockTransactionMockRecorder) RollbackBridges(ctx, height any) *MockTransactionRollbackBridgesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBridges", reflect.TypeOf((*MockTransaction)(nil).RollbackBridges), ctx, height)
	return &MockTransactionRollbackBridgesCall{Call: call}
}

// MockTransactionRollbackBridgesCall wrap *gomock.Call
type MockTransactionRollbackBridgesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackBridgesCall) Return(arg0 int, arg1 error) *MockTransactionRollbackBridgesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackBridgesCall) Do(f func(context.Context, types.Level) (int, error)) *MockTransactionRollbackBridgesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackBridgesCall) DoAndReturn(f func(context.Context, types.Level) (int, error)) *MockTransactionRollbackBridgesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackDeposits mocks base method.
func (m *MockTransaction) RollbackDeposits(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackDeposits", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackDeposits indicates an expected call of RollbackDeposits.
func (mr *MockTransactionMockRecorder) RollbackDeposits(ctx, height any) *MockTransactionRollbackDepositsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackDeposits", reflect.TypeOf((*MockTransaction)(nil).RollbackDeposits), ctx, height)
	return &MockTransactionRollbackDepositsCall{Call: call}
}

// MockTransactionRollbackDepositsCall wrap *gomock.Call
type MockTransactionRollbackDepositsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackDepositsCall) Return(err error) *MockTransactionRollbackDepositsCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackDepositsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackDepositsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackDepositsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackDepositsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackFees mocks base method.
func (m *MockTransaction) RollbackFees(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackFees", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackFees indicates an expected call of RollbackFees.
func (mr *MockTransactionMockRecorder) RollbackFees(ctx, height any) *MockTransactionRollbackFeesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackFees", reflect.TypeOf((*MockTransaction)(nil).RollbackFees), ctx, height)
	return &MockTransactionRollbackFeesCall{Call: call}
}

// MockTransactionRollbackFeesCall wrap *gomock.Call
type MockTransactionRollbackFeesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackFeesCall) Return(err error) *MockTransactionRollbackFeesCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackFeesCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackFeesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackFeesCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackFeesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackRollupActions mocks base method.
func (m *MockTransaction) RollbackRollupActions(ctx context.Context, height types.Level) ([]storage.RollupAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackRollupActions", ctx, height)
	ret0, _ := ret[0].([]storage.RollupAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackRollupActions indicates an expected call of RollbackRollupActions.
func (mr *MockTransactionMockRecorder) RollbackRollupActions(ctx, height any) *MockTransactionRollbackRollupActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackRollupActions", reflect.TypeOf((*MockTransaction)(nil).RollbackRollupActions), ctx, height)
	return &MockTransactionRollbackRollupActionsCall{Call: call}
}

// MockTransactionRollbackRollupActionsCall wrap *gomock.Call
type MockTransactionRollbackRollupActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackRollupActionsCall) Return(rollupActions []storage.RollupAction, err error) *MockTransactionRollbackRollupActionsCall {
	c.Call = c.Call.Return(rollupActions, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackRollupActionsCall) Do(f func(context.Context, types.Level) ([]storage.RollupAction, error)) *MockTransactionRollbackRollupActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackRollupActionsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.RollupAction, error)) *MockTransactionRollbackRollupActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackRollupAddresses mocks base method.
func (m *MockTransaction) RollbackRollupAddresses(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackRollupAddresses", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackRollupAddresses indicates an expected call of RollbackRollupAddresses.
func (mr *MockTransactionMockRecorder) RollbackRollupAddresses(ctx, height any) *MockTransactionRollbackRollupAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackRollupAddresses", reflect.TypeOf((*MockTransaction)(nil).RollbackRollupAddresses), ctx, height)
	return &MockTransactionRollbackRollupAddressesCall{Call: call}
}

// MockTransactionRollbackRollupAddressesCall wrap *gomock.Call
type MockTransactionRollbackRollupAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackRollupAddressesCall) Return(err error) *MockTransactionRollbackRollupAddressesCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackRollupAddressesCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackRollupAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackRollupAddressesCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackRollupAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackRollups mocks base method.
func (m *MockTransaction) RollbackRollups(ctx context.Context, height types.Level) ([]storage.Rollup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackRollups", ctx, height)
	ret0, _ := ret[0].([]storage.Rollup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackRollups indicates an expected call of RollbackRollups.
func (mr *MockTransactionMockRecorder) RollbackRollups(ctx, height any) *MockTransactionRollbackRollupsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackRollups", reflect.TypeOf((*MockTransaction)(nil).RollbackRollups), ctx, height)
	return &MockTransactionRollbackRollupsCall{Call: call}
}

// MockTransactionRollbackRollupsCall wrap *gomock.Call
type MockTransactionRollbackRollupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackRollupsCall) Return(arg0 []storage.Rollup, arg1 error) *MockTransactionRollbackRollupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackRollupsCall) Do(f func(context.Context, types.Level) ([]storage.Rollup, error)) *MockTransactionRollbackRollupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackRollupsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Rollup, error)) *MockTransactionRollbackRollupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackTransfers mocks base method.
func (m *MockTransaction) RollbackTransfers(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransfers", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTransfers indicates an expected call of RollbackTransfers.
func (mr *MockTransactionMockRecorder) RollbackTransfers(ctx, height any) *MockTransactionRollbackTransfersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransfers", reflect.TypeOf((*MockTransaction)(nil).RollbackTransfers), ctx, height)
	return &MockTransactionRollbackTransfersCall{Call: call}
}

// MockTransactionRollbackTransfersCall wrap *gomock.Call
type MockTransactionRollbackTransfersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackTransfersCall) Return(err error) *MockTransactionRollbackTransfersCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackTransfersCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackTransfersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackTransfersCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackTransfersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackTxs mocks base method.
func (m *MockTransaction) RollbackTxs(ctx context.Context, height types.Level) ([]storage.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTxs", ctx, height)
	ret0, _ := ret[0].([]storage.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackTxs indicates an expected call of RollbackTxs.
func (mr *MockTransactionMockRecorder) RollbackTxs(ctx, height any) *MockTransactionRollbackTxsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTxs", reflect.TypeOf((*MockTransaction)(nil).RollbackTxs), ctx, height)
	return &MockTransactionRollbackTxsCall{Call: call}
}

// MockTransactionRollbackTxsCall wrap *gomock.Call
type MockTransactionRollbackTxsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackTxsCall) Return(txs []storage.Tx, err error) *MockTransactionRollbackTxsCall {
	c.Call = c.Call.Return(txs, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackTxsCall) Do(f func(context.Context, types.Level) ([]storage.Tx, error)) *MockTransactionRollbackTxsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackTxsCall) DoAndReturn(f func(context.Context, types.Level) ([]storage.Tx, error)) *MockTransactionRollbackTxsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackValidators mocks base method.
func (m *MockTransaction) RollbackValidators(ctx context.Context, height types.Level) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackValidators", ctx, height)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackValidators indicates an expected call of RollbackValidators.
func (mr *MockTransactionMockRecorder) RollbackValidators(ctx, height any) *MockTransactionRollbackValidatorsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackValidators", reflect.TypeOf((*MockTransaction)(nil).RollbackValidators), ctx, height)
	return &MockTransactionRollbackValidatorsCall{Call: call}
}

// MockTransactionRollbackValidatorsCall wrap *gomock.Call
type MockTransactionRollbackValidatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionRollbackValidatorsCall) Return(err error) *MockTransactionRollbackValidatorsCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionRollbackValidatorsCall) Do(f func(context.Context, types.Level) error) *MockTransactionRollbackValidatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionRollbackValidatorsCall) DoAndReturn(f func(context.Context, types.Level) error) *MockTransactionRollbackValidatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveActions mocks base method.
func (m *MockTransaction) SaveActions(ctx context.Context, actions ...*storage.Action) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range actions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveActions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveActions indicates an expected call of SaveActions.
func (mr *MockTransactionMockRecorder) SaveActions(ctx any, actions ...any) *MockTransactionSaveActionsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, actions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveActions", reflect.TypeOf((*MockTransaction)(nil).SaveActions), varargs...)
	return &MockTransactionSaveActionsCall{Call: call}
}

// MockTransactionSaveActionsCall wrap *gomock.Call
type MockTransactionSaveActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveActionsCall) Return(arg0 error) *MockTransactionSaveActionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveActionsCall) Do(f func(context.Context, ...*storage.Action) error) *MockTransactionSaveActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveActionsCall) DoAndReturn(f func(context.Context, ...*storage.Action) error) *MockTransactionSaveActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveAddressActions mocks base method.
func (m *MockTransaction) SaveAddressActions(ctx context.Context, actions ...*storage.AddressAction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range actions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveAddressActions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAddressActions indicates an expected call of SaveAddressActions.
func (mr *MockTransactionMockRecorder) SaveAddressActions(ctx any, actions ...any) *MockTransactionSaveAddressActionsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, actions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAddressActions", reflect.TypeOf((*MockTransaction)(nil).SaveAddressActions), varargs...)
	return &MockTransactionSaveAddressActionsCall{Call: call}
}

// MockTransactionSaveAddressActionsCall wrap *gomock.Call
type MockTransactionSaveAddressActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveAddressActionsCall) Return(arg0 error) *MockTransactionSaveAddressActionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveAddressActionsCall) Do(f func(context.Context, ...*storage.AddressAction) error) *MockTransactionSaveAddressActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveAddressActionsCall) DoAndReturn(f func(context.Context, ...*storage.AddressAction) error) *MockTransactionSaveAddressActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveAddresses mocks base method.
func (m *MockTransaction) SaveAddresses(ctx context.Context, addresses ...*storage.Address) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range addresses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveAddresses", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAddresses indicates an expected call of SaveAddresses.
func (mr *MockTransactionMockRecorder) SaveAddresses(ctx any, addresses ...any) *MockTransactionSaveAddressesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, addresses...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAddresses", reflect.TypeOf((*MockTransaction)(nil).SaveAddresses), varargs...)
	return &MockTransactionSaveAddressesCall{Call: call}
}

// MockTransactionSaveAddressesCall wrap *gomock.Call
type MockTransactionSaveAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveAddressesCall) Return(arg0 int64, arg1 error) *MockTransactionSaveAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveAddressesCall) Do(f func(context.Context, ...*storage.Address) (int64, error)) *MockTransactionSaveAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveAddressesCall) DoAndReturn(f func(context.Context, ...*storage.Address) (int64, error)) *MockTransactionSaveAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveApp mocks base method.
func (m *MockTransaction) SaveApp(ctx context.Context, app *storage.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveApp", ctx, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveApp indicates an expected call of SaveApp.
func (mr *MockTransactionMockRecorder) SaveApp(ctx, app any) *MockTransactionSaveAppCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveApp", reflect.TypeOf((*MockTransaction)(nil).SaveApp), ctx, app)
	return &MockTransactionSaveAppCall{Call: call}
}

// MockTransactionSaveAppCall wrap *gomock.Call
type MockTransactionSaveAppCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveAppCall) Return(arg0 error) *MockTransactionSaveAppCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveAppCall) Do(f func(context.Context, *storage.App) error) *MockTransactionSaveAppCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveAppCall) DoAndReturn(f func(context.Context, *storage.App) error) *MockTransactionSaveAppCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBalanceUpdates mocks base method.
func (m *MockTransaction) SaveBalanceUpdates(ctx context.Context, updates ...storage.BalanceUpdate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range updates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBalanceUpdates", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBalanceUpdates indicates an expected call of SaveBalanceUpdates.
func (mr *MockTransactionMockRecorder) SaveBalanceUpdates(ctx any, updates ...any) *MockTransactionSaveBalanceUpdatesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, updates...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBalanceUpdates", reflect.TypeOf((*MockTransaction)(nil).SaveBalanceUpdates), varargs...)
	return &MockTransactionSaveBalanceUpdatesCall{Call: call}
}

// MockTransactionSaveBalanceUpdatesCall wrap *gomock.Call
type MockTransactionSaveBalanceUpdatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveBalanceUpdatesCall) Return(arg0 error) *MockTransactionSaveBalanceUpdatesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveBalanceUpdatesCall) Do(f func(context.Context, ...storage.BalanceUpdate) error) *MockTransactionSaveBalanceUpdatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveBalanceUpdatesCall) DoAndReturn(f func(context.Context, ...storage.BalanceUpdate) error) *MockTransactionSaveBalanceUpdatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBalances mocks base method.
func (m *MockTransaction) SaveBalances(ctx context.Context, balances ...storage.Balance) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range balances {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBalances", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBalances indicates an expected call of SaveBalances.
func (mr *MockTransactionMockRecorder) SaveBalances(ctx any, balances ...any) *MockTransactionSaveBalancesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, balances...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBalances", reflect.TypeOf((*MockTransaction)(nil).SaveBalances), varargs...)
	return &MockTransactionSaveBalancesCall{Call: call}
}

// MockTransactionSaveBalancesCall wrap *gomock.Call
type MockTransactionSaveBalancesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveBalancesCall) Return(arg0 error) *MockTransactionSaveBalancesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveBalancesCall) Do(f func(context.Context, ...storage.Balance) error) *MockTransactionSaveBalancesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveBalancesCall) DoAndReturn(f func(context.Context, ...storage.Balance) error) *MockTransactionSaveBalancesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBlockSignatures mocks base method.
func (m *MockTransaction) SaveBlockSignatures(ctx context.Context, signs ...storage.BlockSignature) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range signs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBlockSignatures", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBlockSignatures indicates an expected call of SaveBlockSignatures.
func (mr *MockTransactionMockRecorder) SaveBlockSignatures(ctx any, signs ...any) *MockTransactionSaveBlockSignaturesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, signs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlockSignatures", reflect.TypeOf((*MockTransaction)(nil).SaveBlockSignatures), varargs...)
	return &MockTransactionSaveBlockSignaturesCall{Call: call}
}

// MockTransactionSaveBlockSignaturesCall wrap *gomock.Call
type MockTransactionSaveBlockSignaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveBlockSignaturesCall) Return(arg0 error) *MockTransactionSaveBlockSignaturesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveBlockSignaturesCall) Do(f func(context.Context, ...storage.BlockSignature) error) *MockTransactionSaveBlockSignaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveBlockSignaturesCall) DoAndReturn(f func(context.Context, ...storage.BlockSignature) error) *MockTransactionSaveBlockSignaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBridges mocks base method.
func (m *MockTransaction) SaveBridges(ctx context.Context, bridges ...*storage.Bridge) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range bridges {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBridges", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveBridges indicates an expected call of SaveBridges.
func (mr *MockTransactionMockRecorder) SaveBridges(ctx any, bridges ...any) *MockTransactionSaveBridgesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, bridges...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBridges", reflect.TypeOf((*MockTransaction)(nil).SaveBridges), varargs...)
	return &MockTransactionSaveBridgesCall{Call: call}
}

// MockTransactionSaveBridgesCall wrap *gomock.Call
type MockTransactionSaveBridgesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveBridgesCall) Return(arg0 int64, arg1 error) *MockTransactionSaveBridgesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveBridgesCall) Do(f func(context.Context, ...*storage.Bridge) (int64, error)) *MockTransactionSaveBridgesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveBridgesCall) DoAndReturn(f func(context.Context, ...*storage.Bridge) (int64, error)) *MockTransactionSaveBridgesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveConstants mocks base method.
func (m *MockTransaction) SaveConstants(ctx context.Context, constants ...storage.Constant) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range constants {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveConstants", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConstants indicates an expected call of SaveConstants.
func (mr *MockTransactionMockRecorder) SaveConstants(ctx any, constants ...any) *MockTransactionSaveConstantsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, constants...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConstants", reflect.TypeOf((*MockTransaction)(nil).SaveConstants), varargs...)
	return &MockTransactionSaveConstantsCall{Call: call}
}

// MockTransactionSaveConstantsCall wrap *gomock.Call
type MockTransactionSaveConstantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveConstantsCall) Return(arg0 error) *MockTransactionSaveConstantsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveConstantsCall) Do(f func(context.Context, ...storage.Constant) error) *MockTransactionSaveConstantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveConstantsCall) DoAndReturn(f func(context.Context, ...storage.Constant) error) *MockTransactionSaveConstantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveDeposits mocks base method.
func (m *MockTransaction) SaveDeposits(ctx context.Context, deposits ...*storage.Deposit) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range deposits {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveDeposits", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDeposits indicates an expected call of SaveDeposits.
func (mr *MockTransactionMockRecorder) SaveDeposits(ctx any, deposits ...any) *MockTransactionSaveDepositsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, deposits...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDeposits", reflect.TypeOf((*MockTransaction)(nil).SaveDeposits), varargs...)
	return &MockTransactionSaveDepositsCall{Call: call}
}

// MockTransactionSaveDepositsCall wrap *gomock.Call
type MockTransactionSaveDepositsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveDepositsCall) Return(arg0 error) *MockTransactionSaveDepositsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveDepositsCall) Do(f func(context.Context, ...*storage.Deposit) error) *MockTransactionSaveDepositsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveDepositsCall) DoAndReturn(f func(context.Context, ...*storage.Deposit) error) *MockTransactionSaveDepositsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveFees mocks base method.
func (m *MockTransaction) SaveFees(ctx context.Context, fees ...*storage.Fee) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range fees {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveFees", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFees indicates an expected call of SaveFees.
func (mr *MockTransactionMockRecorder) SaveFees(ctx any, fees ...any) *MockTransactionSaveFeesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, fees...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFees", reflect.TypeOf((*MockTransaction)(nil).SaveFees), varargs...)
	return &MockTransactionSaveFeesCall{Call: call}
}

// MockTransactionSaveFeesCall wrap *gomock.Call
type MockTransactionSaveFeesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveFeesCall) Return(arg0 error) *MockTransactionSaveFeesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveFeesCall) Do(f func(context.Context, ...*storage.Fee) error) *MockTransactionSaveFeesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveFeesCall) DoAndReturn(f func(context.Context, ...*storage.Fee) error) *MockTransactionSaveFeesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveMarketProviders mocks base method.
func (m *MockTransaction) SaveMarketProviders(ctx context.Context, providers ...storage.MarketProviderUpdate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range providers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveMarketProviders", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMarketProviders indicates an expected call of SaveMarketProviders.
func (mr *MockTransactionMockRecorder) SaveMarketProviders(ctx any, providers ...any) *MockTransactionSaveMarketProvidersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, providers...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMarketProviders", reflect.TypeOf((*MockTransaction)(nil).SaveMarketProviders), varargs...)
	return &MockTransactionSaveMarketProvidersCall{Call: call}
}

// MockTransactionSaveMarketProvidersCall wrap *gomock.Call
type MockTransactionSaveMarketProvidersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveMarketProvidersCall) Return(arg0 error) *MockTransactionSaveMarketProvidersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveMarketProvidersCall) Do(f func(context.Context, ...storage.MarketProviderUpdate) error) *MockTransactionSaveMarketProvidersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveMarketProvidersCall) DoAndReturn(f func(context.Context, ...storage.MarketProviderUpdate) error) *MockTransactionSaveMarketProvidersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveMarkets mocks base method.
func (m *MockTransaction) SaveMarkets(ctx context.Context, markets ...storage.MarketUpdate) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range markets {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveMarkets", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMarkets indicates an expected call of SaveMarkets.
func (mr *MockTransactionMockRecorder) SaveMarkets(ctx any, markets ...any) *MockTransactionSaveMarketsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, markets...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMarkets", reflect.TypeOf((*MockTransaction)(nil).SaveMarkets), varargs...)
	return &MockTransactionSaveMarketsCall{Call: call}
}

// MockTransactionSaveMarketsCall wrap *gomock.Call
type MockTransactionSaveMarketsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveMarketsCall) Return(arg0 error) *MockTransactionSaveMarketsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveMarketsCall) Do(f func(context.Context, ...storage.MarketUpdate) error) *MockTransactionSaveMarketsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveMarketsCall) DoAndReturn(f func(context.Context, ...storage.MarketUpdate) error) *MockTransactionSaveMarketsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SavePrices mocks base method.
func (m *MockTransaction) SavePrices(ctx context.Context, prices ...storage.Price) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range prices {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SavePrices", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePrices indicates an expected call of SavePrices.
func (mr *MockTransactionMockRecorder) SavePrices(ctx any, prices ...any) *MockTransactionSavePricesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, prices...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePrices", reflect.TypeOf((*MockTransaction)(nil).SavePrices), varargs...)
	return &MockTransactionSavePricesCall{Call: call}
}

// MockTransactionSavePricesCall wrap *gomock.Call
type MockTransactionSavePricesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSavePricesCall) Return(arg0 error) *MockTransactionSavePricesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSavePricesCall) Do(f func(context.Context, ...storage.Price) error) *MockTransactionSavePricesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSavePricesCall) DoAndReturn(f func(context.Context, ...storage.Price) error) *MockTransactionSavePricesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveRollupActions mocks base method.
func (m *MockTransaction) SaveRollupActions(ctx context.Context, actions ...*storage.RollupAction) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range actions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveRollupActions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRollupActions indicates an expected call of SaveRollupActions.
func (mr *MockTransactionMockRecorder) SaveRollupActions(ctx any, actions ...any) *MockTransactionSaveRollupActionsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, actions...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRollupActions", reflect.TypeOf((*MockTransaction)(nil).SaveRollupActions), varargs...)
	return &MockTransactionSaveRollupActionsCall{Call: call}
}

// MockTransactionSaveRollupActionsCall wrap *gomock.Call
type MockTransactionSaveRollupActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveRollupActionsCall) Return(arg0 error) *MockTransactionSaveRollupActionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveRollupActionsCall) Do(f func(context.Context, ...*storage.RollupAction) error) *MockTransactionSaveRollupActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveRollupActionsCall) DoAndReturn(f func(context.Context, ...*storage.RollupAction) error) *MockTransactionSaveRollupActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveRollupAddresses mocks base method.
func (m *MockTransaction) SaveRollupAddresses(ctx context.Context, addresses ...*storage.RollupAddress) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range addresses {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveRollupAddresses", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRollupAddresses indicates an expected call of SaveRollupAddresses.
func (mr *MockTransactionMockRecorder) SaveRollupAddresses(ctx any, addresses ...any) *MockTransactionSaveRollupAddressesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, addresses...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRollupAddresses", reflect.TypeOf((*MockTransaction)(nil).SaveRollupAddresses), varargs...)
	return &MockTransactionSaveRollupAddressesCall{Call: call}
}

// MockTransactionSaveRollupAddressesCall wrap *gomock.Call
type MockTransactionSaveRollupAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveRollupAddressesCall) Return(arg0 error) *MockTransactionSaveRollupAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveRollupAddressesCall) Do(f func(context.Context, ...*storage.RollupAddress) error) *MockTransactionSaveRollupAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveRollupAddressesCall) DoAndReturn(f func(context.Context, ...*storage.RollupAddress) error) *MockTransactionSaveRollupAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveRollups mocks base method.
func (m *MockTransaction) SaveRollups(ctx context.Context, rollups ...*storage.Rollup) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range rollups {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveRollups", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveRollups indicates an expected call of SaveRollups.
func (mr *MockTransactionMockRecorder) SaveRollups(ctx any, rollups ...any) *MockTransactionSaveRollupsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, rollups...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRollups", reflect.TypeOf((*MockTransaction)(nil).SaveRollups), varargs...)
	return &MockTransactionSaveRollupsCall{Call: call}
}

// MockTransactionSaveRollupsCall wrap *gomock.Call
type MockTransactionSaveRollupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveRollupsCall) Return(arg0 int64, arg1 error) *MockTransactionSaveRollupsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveRollupsCall) Do(f func(context.Context, ...*storage.Rollup) (int64, error)) *MockTransactionSaveRollupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveRollupsCall) DoAndReturn(f func(context.Context, ...*storage.Rollup) (int64, error)) *MockTransactionSaveRollupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveTransactions mocks base method.
func (m *MockTransaction) SaveTransactions(ctx context.Context, txs ...*storage.Tx) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range txs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveTransactions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTransactions indicates an expected call of SaveTransactions.
func (mr *MockTransactionMockRecorder) SaveTransactions(ctx any, txs ...any) *MockTransactionSaveTransactionsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, txs...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransactions", reflect.TypeOf((*MockTransaction)(nil).SaveTransactions), varargs...)
	return &MockTransactionSaveTransactionsCall{Call: call}
}

// MockTransactionSaveTransactionsCall wrap *gomock.Call
type MockTransactionSaveTransactionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveTransactionsCall) Return(arg0 error) *MockTransactionSaveTransactionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveTransactionsCall) Do(f func(context.Context, ...*storage.Tx) error) *MockTransactionSaveTransactionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveTransactionsCall) DoAndReturn(f func(context.Context, ...*storage.Tx) error) *MockTransactionSaveTransactionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveTransfers mocks base method.
func (m *MockTransaction) SaveTransfers(ctx context.Context, transfers ...*storage.Transfer) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range transfers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveTransfers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTransfers indicates an expected call of SaveTransfers.
func (mr *MockTransactionMockRecorder) SaveTransfers(ctx any, transfers ...any) *MockTransactionSaveTransfersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, transfers...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransfers", reflect.TypeOf((*MockTransaction)(nil).SaveTransfers), varargs...)
	return &MockTransactionSaveTransfersCall{Call: call}
}

// MockTransactionSaveTransfersCall wrap *gomock.Call
type MockTransactionSaveTransfersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveTransfersCall) Return(arg0 error) *MockTransactionSaveTransfersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveTransfersCall) Do(f func(context.Context, ...*storage.Transfer) error) *MockTransactionSaveTransfersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveTransfersCall) DoAndReturn(f func(context.Context, ...*storage.Transfer) error) *MockTransactionSaveTransfersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveValidators mocks base method.
func (m *MockTransaction) SaveValidators(ctx context.Context, validators ...*storage.Validator) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range validators {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveValidators", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveValidators indicates an expected call of SaveValidators.
func (mr *MockTransactionMockRecorder) SaveValidators(ctx any, validators ...any) *MockTransactionSaveValidatorsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, validators...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveValidators", reflect.TypeOf((*MockTransaction)(nil).SaveValidators), varargs...)
	return &MockTransactionSaveValidatorsCall{Call: call}
}

// MockTransactionSaveValidatorsCall wrap *gomock.Call
type MockTransactionSaveValidatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionSaveValidatorsCall) Return(arg0 error) *MockTransactionSaveValidatorsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionSaveValidatorsCall) Do(f func(context.Context, ...*storage.Validator) error) *MockTransactionSaveValidatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionSaveValidatorsCall) DoAndReturn(f func(context.Context, ...*storage.Validator) error) *MockTransactionSaveValidatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// State mocks base method.
func (m *MockTransaction) State(ctx context.Context, name string) (storage.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State", ctx, name)
	ret0, _ := ret[0].(storage.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State.
func (mr *MockTransactionMockRecorder) State(ctx, name any) *MockTransactionStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockTransaction)(nil).State), ctx, name)
	return &MockTransactionStateCall{Call: call}
}

// MockTransactionStateCall wrap *gomock.Call
type MockTransactionStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionStateCall) Return(state storage.State, err error) *MockTransactionStateCall {
	c.Call = c.Call.Return(state, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionStateCall) Do(f func(context.Context, string) (storage.State, error)) *MockTransactionStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionStateCall) DoAndReturn(f func(context.Context, string) (storage.State, error)) *MockTransactionStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tx mocks base method.
func (m *MockTransaction) Tx() *bun.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(*bun.Tx)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockTransactionMockRecorder) Tx() *MockTransactionTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockTransaction)(nil).Tx))
	return &MockTransactionTxCall{Call: call}
}

// MockTransactionTxCall wrap *gomock.Call
type MockTransactionTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionTxCall) Return(arg0 *bun.Tx) *MockTransactionTxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionTxCall) Do(f func() *bun.Tx) *MockTransactionTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionTxCall) DoAndReturn(f func() *bun.Tx) *MockTransactionTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockTransaction) Update(ctx context.Context, model any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, model)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransactionMockRecorder) Update(ctx, model any) *MockTransactionUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransaction)(nil).Update), ctx, model)
	return &MockTransactionUpdateCall{Call: call}
}

// MockTransactionUpdateCall wrap *gomock.Call
type MockTransactionUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionUpdateCall) Return(arg0 error) *MockTransactionUpdateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionUpdateCall) Do(f func(context.Context, any) error) *MockTransactionUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionUpdateCall) DoAndReturn(f func(context.Context, any) error) *MockTransactionUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateAddresses mocks base method.
func (m *MockTransaction) UpdateAddresses(ctx context.Context, address ...*storage.Address) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range address {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAddresses", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddresses indicates an expected call of UpdateAddresses.
func (mr *MockTransactionMockRecorder) UpdateAddresses(ctx any, address ...any) *MockTransactionUpdateAddressesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, address...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddresses", reflect.TypeOf((*MockTransaction)(nil).UpdateAddresses), varargs...)
	return &MockTransactionUpdateAddressesCall{Call: call}
}

// MockTransactionUpdateAddressesCall wrap *gomock.Call
type MockTransactionUpdateAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionUpdateAddressesCall) Return(arg0 error) *MockTransactionUpdateAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionUpdateAddressesCall) Do(f func(context.Context, ...*storage.Address) error) *MockTransactionUpdateAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionUpdateAddressesCall) DoAndReturn(f func(context.Context, ...*storage.Address) error) *MockTransactionUpdateAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateApp mocks base method.
func (m *MockTransaction) UpdateApp(ctx context.Context, app *storage.App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", ctx, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockTransactionMockRecorder) UpdateApp(ctx, app any) *MockTransactionUpdateAppCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockTransaction)(nil).UpdateApp), ctx, app)
	return &MockTransactionUpdateAppCall{Call: call}
}

// MockTransactionUpdateAppCall wrap *gomock.Call
type MockTransactionUpdateAppCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionUpdateAppCall) Return(arg0 error) *MockTransactionUpdateAppCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionUpdateAppCall) Do(f func(context.Context, *storage.App) error) *MockTransactionUpdateAppCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionUpdateAppCall) DoAndReturn(f func(context.Context, *storage.App) error) *MockTransactionUpdateAppCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateConstants mocks base method.
func (m *MockTransaction) UpdateConstants(ctx context.Context, constants ...*storage.Constant) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range constants {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConstants", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConstants indicates an expected call of UpdateConstants.
func (mr *MockTransactionMockRecorder) UpdateConstants(ctx any, constants ...any) *MockTransactionUpdateConstantsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, constants...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConstants", reflect.TypeOf((*MockTransaction)(nil).UpdateConstants), varargs...)
	return &MockTransactionUpdateConstantsCall{Call: call}
}

// MockTransactionUpdateConstantsCall wrap *gomock.Call
type MockTransactionUpdateConstantsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionUpdateConstantsCall) Return(arg0 error) *MockTransactionUpdateConstantsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionUpdateConstantsCall) Do(f func(context.Context, ...*storage.Constant) error) *MockTransactionUpdateConstantsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionUpdateConstantsCall) DoAndReturn(f func(context.Context, ...*storage.Constant) error) *MockTransactionUpdateConstantsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateRollups mocks base method.
func (m *MockTransaction) UpdateRollups(ctx context.Context, rollups ...*storage.Rollup) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range rollups {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRollups", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRollups indicates an expected call of UpdateRollups.
func (mr *MockTransactionMockRecorder) UpdateRollups(ctx any, rollups ...any) *MockTransactionUpdateRollupsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, rollups...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRollups", reflect.TypeOf((*MockTransaction)(nil).UpdateRollups), varargs...)
	return &MockTransactionUpdateRollupsCall{Call: call}
}

// MockTransactionUpdateRollupsCall wrap *gomock.Call
type MockTransactionUpdateRollupsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionUpdateRollupsCall) Return(arg0 error) *MockTransactionUpdateRollupsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionUpdateRollupsCall) Do(f func(context.Context, ...*storage.Rollup) error) *MockTransactionUpdateRollupsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionUpdateRollupsCall) DoAndReturn(f func(context.Context, ...*storage.Rollup) error) *MockTransactionUpdateRollupsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validators mocks base method.
func (m *MockTransaction) Validators(ctx context.Context) ([]storage.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators", ctx)
	ret0, _ := ret[0].([]storage.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validators indicates an expected call of Validators.
func (mr *MockTransactionMockRecorder) Validators(ctx any) *MockTransactionValidatorsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockTransaction)(nil).Validators), ctx)
	return &MockTransactionValidatorsCall{Call: call}
}

// MockTransactionValidatorsCall wrap *gomock.Call
type MockTransactionValidatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransactionValidatorsCall) Return(arg0 []storage.Validator, arg1 error) *MockTransactionValidatorsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransactionValidatorsCall) Do(f func(context.Context) ([]storage.Validator, error)) *MockTransactionValidatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransactionValidatorsCall) DoAndReturn(f func(context.Context) ([]storage.Validator, error)) *MockTransactionValidatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockISearch is a mock of ISearch interface.
type MockISearch struct {
	ctrl     *gomock.Controller
	recorder *MockISearchMockRecorder
}

// MockISearchMockRecorder is the mock recorder for MockISearch.
type MockISearchMockRecorder struct {
	mock *MockISearch
}

// NewMockISearch creates a new mock instance.
func NewMockISearch(ctrl *gomock.Controller) *MockISearch {
	mock := &MockISearch{ctrl: ctrl}
	mock.recorder = &MockISearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISearch) EXPECT() *MockISearchMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockISearch) Search(ctx context.Context, query string) ([]storage.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query)
	ret0, _ := ret[0].([]storage.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockISearchMockRecorder) Search(ctx, query any) *MockISearchSearchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockISearch)(nil).Search), ctx, query)
	return &MockISearchSearchCall{Call: call}
}

// MockISearchSearchCall wrap *gomock.Call
type MockISearchSearchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockISearchSearchCall) Return(arg0 []storage.SearchResult, arg1 error) *MockISearchSearchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockISearchSearchCall) Do(f func(context.Context, string) ([]storage.SearchResult, error)) *MockISearchSearchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockISearchSearchCall) DoAndReturn(f func(context.Context, string) ([]storage.SearchResult, error)) *MockISearchSearchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNotificator is a mock of Notificator interface.
type MockNotificator struct {
	ctrl     *gomock.Controller
	recorder *MockNotificatorMockRecorder
}

// MockNotificatorMockRecorder is the mock recorder for MockNotificator.
type MockNotificatorMockRecorder struct {
	mock *MockNotificator
}

// NewMockNotificator creates a new mock instance.
func NewMockNotificator(ctrl *gomock.Controller) *MockNotificator {
	mock := &MockNotificator{ctrl: ctrl}
	mock.recorder = &MockNotificatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificator) EXPECT() *MockNotificatorMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockNotificator) Notify(ctx context.Context, channel, payload string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, channel, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockNotificatorMockRecorder) Notify(ctx, channel, payload any) *MockNotificatorNotifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockNotificator)(nil).Notify), ctx, channel, payload)
	return &MockNotificatorNotifyCall{Call: call}
}

// MockNotificatorNotifyCall wrap *gomock.Call
type MockNotificatorNotifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificatorNotifyCall) Return(arg0 error) *MockNotificatorNotifyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificatorNotifyCall) Do(f func(context.Context, string, string) error) *MockNotificatorNotifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificatorNotifyCall) DoAndReturn(f func(context.Context, string, string) error) *MockNotificatorNotifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockListener is a mock of Listener interface.
type MockListener struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder
}

// MockListenerMockRecorder is the mock recorder for MockListener.
type MockListenerMockRecorder struct {
	mock *MockListener
}

// NewMockListener creates a new mock instance.
func NewMockListener(ctrl *gomock.Controller) *MockListener {
	mock := &MockListener{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListener) EXPECT() *MockListenerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockListener) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockListenerMockRecorder) Close() *MockListenerCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockListener)(nil).Close))
	return &MockListenerCloseCall{Call: call}
}

// MockListenerCloseCall wrap *gomock.Call
type MockListenerCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListenerCloseCall) Return(arg0 error) *MockListenerCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListenerCloseCall) Do(f func() error) *MockListenerCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListenerCloseCall) DoAndReturn(f func() error) *MockListenerCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Listen mocks base method.
func (m *MockListener) Listen() chan *pq.Notification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen")
	ret0, _ := ret[0].(chan *pq.Notification)
	return ret0
}

// Listen indicates an expected call of Listen.
func (mr *MockListenerMockRecorder) Listen() *MockListenerListenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockListener)(nil).Listen))
	return &MockListenerListenCall{Call: call}
}

// MockListenerListenCall wrap *gomock.Call
type MockListenerListenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListenerListenCall) Return(arg0 chan *pq.Notification) *MockListenerListenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListenerListenCall) Do(f func() chan *pq.Notification) *MockListenerListenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListenerListenCall) DoAndReturn(f func() chan *pq.Notification) *MockListenerListenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Subscribe mocks base method.
func (m *MockListener) Subscribe(ctx context.Context, channels ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range channels {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockListenerMockRecorder) Subscribe(ctx any, channels ...any) *MockListenerSubscribeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, channels...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockListener)(nil).Subscribe), varargs...)
	return &MockListenerSubscribeCall{Call: call}
}

// MockListenerSubscribeCall wrap *gomock.Call
type MockListenerSubscribeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListenerSubscribeCall) Return(arg0 error) *MockListenerSubscribeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListenerSubscribeCall) Do(f func(context.Context, ...string) error) *MockListenerSubscribeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListenerSubscribeCall) DoAndReturn(f func(context.Context, ...string) error) *MockListenerSubscribeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockListenerFactory is a mock of ListenerFactory interface.
type MockListenerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockListenerFactoryMockRecorder
}

// MockListenerFactoryMockRecorder is the mock recorder for MockListenerFactory.
type MockListenerFactoryMockRecorder struct {
	mock *MockListenerFactory
}

// NewMockListenerFactory creates a new mock instance.
func NewMockListenerFactory(ctrl *gomock.Controller) *MockListenerFactory {
	mock := &MockListenerFactory{ctrl: ctrl}
	mock.recorder = &MockListenerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListenerFactory) EXPECT() *MockListenerFactoryMockRecorder {
	return m.recorder
}

// CreateListener mocks base method.
func (m *MockListenerFactory) CreateListener() storage.Listener {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListener")
	ret0, _ := ret[0].(storage.Listener)
	return ret0
}

// CreateListener indicates an expected call of CreateListener.
func (mr *MockListenerFactoryMockRecorder) CreateListener() *MockListenerFactoryCreateListenerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListener", reflect.TypeOf((*MockListenerFactory)(nil).CreateListener))
	return &MockListenerFactoryCreateListenerCall{Call: call}
}

// MockListenerFactoryCreateListenerCall wrap *gomock.Call
type MockListenerFactoryCreateListenerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockListenerFactoryCreateListenerCall) Return(arg0 storage.Listener) *MockListenerFactoryCreateListenerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockListenerFactoryCreateListenerCall) Do(f func() storage.Listener) *MockListenerFactoryCreateListenerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockListenerFactoryCreateListenerCall) DoAndReturn(f func() storage.Listener) *MockListenerFactoryCreateListenerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
