// SPDX-FileCopyrightText: 2024 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package types

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// AppCategoryUncategorized is a AppCategory of type uncategorized.
	AppCategoryUncategorized AppCategory = "uncategorized"
	// AppCategoryFinance is a AppCategory of type finance.
	AppCategoryFinance AppCategory = "finance"
	// AppCategoryGaming is a AppCategory of type gaming.
	AppCategoryGaming AppCategory = "gaming"
	// AppCategoryNft is a AppCategory of type nft.
	AppCategoryNft AppCategory = "nft"
	// AppCategorySocial is a AppCategory of type social.
	AppCategorySocial AppCategory = "social"
)

var ErrInvalidAppCategory = fmt.Errorf("not a valid AppCategory, try [%s]", strings.Join(_AppCategoryNames, ", "))

var _AppCategoryNames = []string{
	string(AppCategoryUncategorized),
	string(AppCategoryFinance),
	string(AppCategoryGaming),
	string(AppCategoryNft),
	string(AppCategorySocial),
}

// AppCategoryNames returns a list of possible string values of AppCategory.
func AppCategoryNames() []string {
	tmp := make([]string, len(_AppCategoryNames))
	copy(tmp, _AppCategoryNames)
	return tmp
}

// AppCategoryValues returns a list of the values for AppCategory
func AppCategoryValues() []AppCategory {
	return []AppCategory{
		AppCategoryUncategorized,
		AppCategoryFinance,
		AppCategoryGaming,
		AppCategoryNft,
		AppCategorySocial,
	}
}

// String implements the Stringer interface.
func (x AppCategory) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AppCategory) IsValid() bool {
	_, err := ParseAppCategory(string(x))
	return err == nil
}

var _AppCategoryValue = map[string]AppCategory{
	"uncategorized": AppCategoryUncategorized,
	"finance":       AppCategoryFinance,
	"gaming":        AppCategoryGaming,
	"nft":           AppCategoryNft,
	"social":        AppCategorySocial,
}

// ParseAppCategory attempts to convert a string to a AppCategory.
func ParseAppCategory(name string) (AppCategory, error) {
	if x, ok := _AppCategoryValue[name]; ok {
		return x, nil
	}
	return AppCategory(""), fmt.Errorf("%s is %w", name, ErrInvalidAppCategory)
}

// MarshalText implements the text marshaller method.
func (x AppCategory) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AppCategory) UnmarshalText(text []byte) error {
	tmp, err := ParseAppCategory(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errAppCategoryNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *AppCategory) Scan(value interface{}) (err error) {
	if value == nil {
		*x = AppCategory("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseAppCategory(v)
	case []byte:
		*x, err = ParseAppCategory(string(v))
	case AppCategory:
		*x = v
	case *AppCategory:
		if v == nil {
			return errAppCategoryNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errAppCategoryNilPtr
		}
		*x, err = ParseAppCategory(*v)
	default:
		return errors.New("invalid type for AppCategory")
	}

	return
}

// Value implements the driver Valuer interface.
func (x AppCategory) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// AppTypeSovereign is a AppType of type sovereign.
	AppTypeSovereign AppType = "sovereign"
	// AppTypeSettled is a AppType of type settled.
	AppTypeSettled AppType = "settled"
)

var ErrInvalidAppType = fmt.Errorf("not a valid AppType, try [%s]", strings.Join(_AppTypeNames, ", "))

var _AppTypeNames = []string{
	string(AppTypeSovereign),
	string(AppTypeSettled),
}

// AppTypeNames returns a list of possible string values of AppType.
func AppTypeNames() []string {
	tmp := make([]string, len(_AppTypeNames))
	copy(tmp, _AppTypeNames)
	return tmp
}

// AppTypeValues returns a list of the values for AppType
func AppTypeValues() []AppType {
	return []AppType{
		AppTypeSovereign,
		AppTypeSettled,
	}
}

// String implements the Stringer interface.
func (x AppType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AppType) IsValid() bool {
	_, err := ParseAppType(string(x))
	return err == nil
}

var _AppTypeValue = map[string]AppType{
	"sovereign": AppTypeSovereign,
	"settled":   AppTypeSettled,
}

// ParseAppType attempts to convert a string to a AppType.
func ParseAppType(name string) (AppType, error) {
	if x, ok := _AppTypeValue[name]; ok {
		return x, nil
	}
	return AppType(""), fmt.Errorf("%s is %w", name, ErrInvalidAppType)
}

// MarshalText implements the text marshaller method.
func (x AppType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AppType) UnmarshalText(text []byte) error {
	tmp, err := ParseAppType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errAppTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *AppType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = AppType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseAppType(v)
	case []byte:
		*x, err = ParseAppType(string(v))
	case AppType:
		*x = v
	case *AppType:
		if v == nil {
			return errAppTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errAppTypeNilPtr
		}
		*x, err = ParseAppType(*v)
	default:
		return errors.New("invalid type for AppType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x AppType) Value() (driver.Value, error) {
	return x.String(), nil
}
