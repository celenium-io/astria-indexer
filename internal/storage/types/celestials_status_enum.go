// SPDX-FileCopyrightText: 2025 PK Lab AG <contact@pklab.io>
// SPDX-License-Identifier: MIT

// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package types

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// CelestialsStatusNOTVERIFIED is a CelestialsStatus of type NOT_VERIFIED.
	CelestialsStatusNOTVERIFIED CelestialsStatus = "NOT_VERIFIED"
	// CelestialsStatusVERIFIED is a CelestialsStatus of type VERIFIED.
	CelestialsStatusVERIFIED CelestialsStatus = "VERIFIED"
	// CelestialsStatusPRIMARY is a CelestialsStatus of type PRIMARY.
	CelestialsStatusPRIMARY CelestialsStatus = "PRIMARY"
)

var ErrInvalidCelestialsStatus = fmt.Errorf("not a valid CelestialsStatus, try [%s]", strings.Join(_CelestialsStatusNames, ", "))

var _CelestialsStatusNames = []string{
	string(CelestialsStatusNOTVERIFIED),
	string(CelestialsStatusVERIFIED),
	string(CelestialsStatusPRIMARY),
}

// CelestialsStatusNames returns a list of possible string values of CelestialsStatus.
func CelestialsStatusNames() []string {
	tmp := make([]string, len(_CelestialsStatusNames))
	copy(tmp, _CelestialsStatusNames)
	return tmp
}

// CelestialsStatusValues returns a list of the values for CelestialsStatus
func CelestialsStatusValues() []CelestialsStatus {
	return []CelestialsStatus{
		CelestialsStatusNOTVERIFIED,
		CelestialsStatusVERIFIED,
		CelestialsStatusPRIMARY,
	}
}

// String implements the Stringer interface.
func (x CelestialsStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CelestialsStatus) IsValid() bool {
	_, err := ParseCelestialsStatus(string(x))
	return err == nil
}

var _CelestialsStatusValue = map[string]CelestialsStatus{
	"NOT_VERIFIED": CelestialsStatusNOTVERIFIED,
	"VERIFIED":     CelestialsStatusVERIFIED,
	"PRIMARY":      CelestialsStatusPRIMARY,
}

// ParseCelestialsStatus attempts to convert a string to a CelestialsStatus.
func ParseCelestialsStatus(name string) (CelestialsStatus, error) {
	if x, ok := _CelestialsStatusValue[name]; ok {
		return x, nil
	}
	return CelestialsStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidCelestialsStatus)
}

// MarshalText implements the text marshaller method.
func (x CelestialsStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *CelestialsStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseCelestialsStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errCelestialsStatusNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *CelestialsStatus) Scan(value interface{}) (err error) {
	if value == nil {
		*x = CelestialsStatus("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseCelestialsStatus(v)
	case []byte:
		*x, err = ParseCelestialsStatus(string(v))
	case CelestialsStatus:
		*x = v
	case *CelestialsStatus:
		if v == nil {
			return errCelestialsStatusNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errCelestialsStatusNilPtr
		}
		*x, err = ParseCelestialsStatus(*v)
	default:
		return errors.New("invalid type for CelestialsStatus")
	}

	return
}

// Value implements the driver Valuer interface.
func (x CelestialsStatus) Value() (driver.Value, error) {
	return x.String(), nil
}
